<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jade&#39;s Blog</title>
  
  <subtitle>An archive for daily discovery</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kodakyung.github.io/"/>
  <updated>2019-07-17T17:04:56.105Z</updated>
  <id>https://kodakyung.github.io/</id>
  
  <author>
    <name>Dakyung Ko</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OS - 동기화(Synchronization)와 임계 영역(Critical Section)</title>
    <link href="https://kodakyung.github.io/2019/07/17/OS-%EB%8F%99%EA%B8%B0%ED%99%94-Synchronization-%EC%99%80-%EC%9E%84%EA%B3%84-%EC%98%81%EC%97%AD-Critical-Section/"/>
    <id>https://kodakyung.github.io/2019/07/17/OS-동기화-Synchronization-와-임계-영역-Critical-Section/</id>
    <published>2019-07-17T14:46:37.000Z</published>
    <updated>2019-07-17T17:04:56.105Z</updated>
    
    <content type="html"><![CDATA[<p>병렬 프로그래밍에서 임계영역 까지의 흐름을 정리해보았다. </p><h2 id="병렬-프로그래밍-Parallel-Programming"><a href="#병렬-프로그래밍-Parallel-Programming" class="headerlink" title="병렬 프로그래밍(Parallel Programming)"></a>병렬 프로그래밍(Parallel Programming)</h2><ul><li>멀티코어(<code>Multi-Core</code>)가 등장한 이후 여러 개의 코어를 효과적으로 사용하기 위해 등장.</li><li>하나의 프로그램이 <code>동시에 여러 일</code>을 수행하게 만드는 방법을 통칭하는 용어이다.</li><li>여기서는 동시 프로그래밍(<code>Concurrent Programming</code>) 의미의 병렬프로그램이다.<ul><li>다른 의미로 고성능 컴퓨팅(High Performance Computing)의 한 분야를 지칭하기도 한다. </li></ul></li><li>규모가변성(<code>Scalability</code>)이 뛰어난 프로그램이라면 코어의 수를 늘렸을 때 프로그램의 성능이 향상된다.</li><li>규모가변성이 보장되면서 스레드 세이프(<code>Thread-Safe</code>)한 코드를 작성하는 것은 매우 어려운 편이다.</li></ul><h3 id="고전적인-병렬-프로그램-예시들"><a href="#고전적인-병렬-프로그램-예시들" class="headerlink" title="고전적인 병렬 프로그램 예시들"></a>고전적인 병렬 프로그램 예시들</h3><ul><li>공통된 자원을 공유하고 락(Lock)과 컨디션 변수(Condition Variable)를 통해 공유 자원의 접근을 통제하는 멀티 스레드 프로그래밍(Multi-Thread Programming).</li><li>OS 프로세스 여러개에 프로세스 간 통신(Inter-Process Communication)을 통해 데이터를 처리하는 경우. </li><li>등등…</li></ul><h2 id="멀티-스레드-프로그래밍"><a href="#멀티-스레드-프로그래밍" class="headerlink" title="멀티 스레드 프로그래밍"></a>멀티 스레드 프로그래밍</h2><ul><li>공유 자원(or 메모리)를 여러 개의 스레드가 동시에 프로그래밍을 수행하며 같은 자원에 데이터를 읽고 쓰며 통신하는 것.</li><li>일반적으로 운영체제나 시스템 SW에 사용됐지만 <code>Java</code>의 <code>Monitor</code> 개념에 도입되면서 일반 개발자들도 많이 사용한다.</li><li>멀티스레드 프로그래밍은 오류 없이 설계하기 어렵고 비결정적이며 테스트가 어렵고 버그도 재현이 어려워 디버깅이 거의 불가능하다.</li><li>즉 <code>안정성</code>과 <code>규모가변성</code>이 상충되기 때문에 적절한 프로그래밍을 하는 것이 어렵다.</li></ul><blockquote><p>참고  </p><ul><li>아래부터 언급하는 Process는 해당 개념이 사용되는 영역이 어떤 것이냐에 따라 Thread로 해석할 수 있다.</li><li>ex) OS(ex Linux)에서는 Process 기준, Java에서는 Thread 기준이다.</li></ul></blockquote><h2 id="동기화-Synchronization"><a href="#동기화-Synchronization" class="headerlink" title="동기화(Synchronization)"></a>동기화(Synchronization)</h2><ul><li><code>레이스 컨디션</code> 상황을 막기 위해 프로세스/스레드들에 하나의 자원에 대한 처리 <code>권한</code>을 주거나 <code>순서</code>를 조정해주는 기법이다. </li><li><code>다중 스레드</code> 환경에 공유되는 자원이 있다면 필수적으로 고려해야한다. </li><li>프로세스의 경우 OS 레벨에서 공유 자원 문제를 처리해주지만 한 프로세스 내에서 실행되는 여러 개의 스레드들은 공유 자원에 대해 동기화 문제를 고려해야한다. </li></ul><h3 id="경쟁-상황-레이스-컨디션-Race-Condition"><a href="#경쟁-상황-레이스-컨디션-Race-Condition" class="headerlink" title="경쟁 상황(레이스 컨디션, Race Condition)"></a>경쟁 상황(레이스 컨디션, Race Condition)</h3><ul><li><code>공유 자원</code>에 여러 프로세스/스레드가 동시에 접근하기 위해 <code>경쟁</code>하는 상태를 뜻한다.<ul><li>ex) OS에서 CPU 점유율 등 </li></ul></li><li><code>동기화 처리</code>를 제대로 하지 않으면 의도하지 않은 잘못된 결과가 나올 수 있다. </li></ul><h2 id="임계-영역-Critical-Section"><a href="#임계-영역-Critical-Section" class="headerlink" title="임계 영역(Critical Section)"></a>임계 영역(Critical Section)</h2><ul><li><code>공유 자원</code>에 <code>접근</code>하는 프로세스 내부의 코드 영역.</li><li>한 프로세스의 임계 영역이 수행 중일 때 다른 프로세스가 같은 공유 자원을 사용하는 임계 영역을 수행한다면 문제가 발생할 수 있다.</li><li>따라서 한 번에 한 프로세스만 접근해 사용한다.</li><li>임계 영역을 들어오는 진입 영역(entry section), 나가는 부분인 퇴출 영역(exit section), 나머지 영역(remainder section)으로 구분된다. </li></ul><h2 id="임계-영역의-조건"><a href="#임계-영역의-조건" class="headerlink" title="임계 영역의 조건"></a>임계 영역의 조건</h2><h3 id="상호-배제-Mutual-Exclusion-Mutex"><a href="#상호-배제-Mutual-Exclusion-Mutex" class="headerlink" title="상호 배제(Mutual Exclusion( == Mutex))"></a>상호 배제(Mutual Exclusion( == Mutex))</h3><ul><li>한 프로세스가 자신의 임계 영역 내에서 실행되는 동안, 다른 프로세스가 같은 공유 자원을 사용하는 자신의 임계 영역에서 실행될 수 없는 것.</li></ul><h3 id="진행-Progress"><a href="#진행-Progress" class="headerlink" title="진행 (Progress)"></a>진행 (Progress)</h3><ul><li>임계 영역을 실행 중인 프로세스가 없고 자신의 임계 영역으로 진입하려는 프로세스가 있다면, 나머지 영역에서 실행 중이지 않은 프로세스들만 임계 영역으로 진입하기 위해 요청할 수 있다.</li><li>이는 무기한 연기될 수 없다.</li></ul><h3 id="한정된-대기-Bounded-waiting"><a href="#한정된-대기-Bounded-waiting" class="headerlink" title="한정된 대기 (Bounded waiting)"></a>한정된 대기 (Bounded waiting)</h3><ul><li>프로세스가 자신의 임계 영역에 진입하기 위해 요청을 한 뒤, 그 요청이 허가될 때까지 다른 프로세스들이 자신의 임계 영역에 진입하도록 허용하는 횟수의 제한이 있어야한다. </li></ul><h2 id="임계-영역-해결-방안-동기화"><a href="#임계-영역-해결-방안-동기화" class="headerlink" title="임계 영역 해결 방안(동기화)"></a>임계 영역 해결 방안(동기화)</h2><ul><li>하드웨어 기반 동기화와 소프트웨어 기반 동기화로 나뉜다.</li><li>대표적인 소프트웨어 기반 동기화 기법으로 상호 배제(<code>Mutex</code>), 세마포어(<code>Semaphore</code>), 모니터(<code>Monitor</code>) 등이 있다.</li></ul><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://skyul.tistory.com/327" target="_blank" rel="noopener">소프트웨어 트랜잭션 메모리와 하스켈</a></li><li><a href="https://tiredsleeper.tistory.com/32?category=779575" target="_blank" rel="noopener">프로세스 동기화의 필요성, 임계 영역</a></li><li><a href="https://12bme.tistory.com/68" target="_blank" rel="noopener">멀티 스레드와 동기화</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;병렬 프로그래밍에서 임계영역 까지의 흐름을 정리해보았다. &lt;/p&gt;
&lt;h2 id=&quot;병렬-프로그래밍-Parallel-Programming&quot;&gt;&lt;a href=&quot;#병렬-프로그래밍-Parallel-Programming&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="CS" scheme="https://kodakyung.github.io/categories/CS/"/>
    
      <category term="OS" scheme="https://kodakyung.github.io/categories/CS/OS/"/>
    
    
      <category term="OS" scheme="https://kodakyung.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot-ReactJS 프로젝트에서 OAuth 소셜 로그인 구현 중 마주친 CORS 문제</title>
    <link href="https://kodakyung.github.io/2019/06/16/old-post-Troubleshooting-2019-06-16-springboot-react-cors/"/>
    <id>https://kodakyung.github.io/2019/06/16/old-post-Troubleshooting-2019-06-16-springboot-react-cors/</id>
    <published>2019-06-15T15:00:00.000Z</published>
    <updated>2019-07-20T13:49:59.730Z</updated>
    
    <content type="html"><![CDATA[<p><code>SpringBoot</code> 프로젝트에 <code>OAuth2</code> 소셜 로그인을 구현하는 프로젝트에서 발생한 문제이다. 작은 규모의 프로젝트였기 때문에 SpringBoot와 View단의 <code>ReactJS</code>를 따로 호스팅하지 않고 SpringBoot의 정적 리소스에 React Build 파일을 포함해 배포를 하였다. 여기서 React에서 Login API를 호출하는데 CORS 에러가 발생하였다.</p><h3 id="CORS란"><a href="#CORS란" class="headerlink" title="CORS란?"></a>CORS란?</h3><blockquote><p>Cross Origin Resource Sharing의 약자로 현재 웹페이지가 이 페이지를 받은 서버가 아닌 다른 서버의 리소스를 호출하는 것을 의미한다.</p></blockquote><p>우선 OAuth 로그인 프로세스를 살펴보면 여러가지 승인 타입이 있는데 이 중 <code>권한 부여 코드 승인 타입(Authorization Code Grant Type)</code>을 이용해 로그인을 구현하였다. 페이스북이나 구글, 카카오 등에서 위 타입의 방식으로 웹 서버 클라이언트를 지원한다.</p><h3 id="권한-부여-코드-승인-타입-Authorization-Code-Grant-Type"><a href="#권한-부여-코드-승인-타입-Authorization-Code-Grant-Type" class="headerlink" title="권한 부여 코드 승인 타입(Authorization Code Grant Type)"></a>권한 부여 코드 승인 타입(Authorization Code Grant Type)</h3><p><img src="/images/2019-06-16/auth_code_flow.png" alt="authorization-code-grant-type"></p><blockquote><p><a href="http://www.bubblecode.net/en/2016/01/22/understanding-oauth2/" target="_blank" rel="noopener">이미지 출처</a></p></blockquote><p>인증 과정을 살펴보면 처음에 <code>client</code>가 <code>Authorization Code Request</code>를 한뒤 <code>Authorization Server</code>에서 <code>client_id</code>와 <code>redirect_uri</code>, <code>response_type</code>을 확인한 뒤 <code>Resource Owner</code>가 로그인할 수 있도록 한다. 이후 <code>Resource Owner</code>가 로그인을 하면 뒤의 인증과정이 더 이루어지는 것이다.</p><p>여기서 <code>Authorization Server</code> 즉 소셜로그인을 하려는 대상인 서버(현 프로젝트에서는 Google)에서 필요한 조건들을 확인한 뒤 <code>Login</code>창으로 <code>Redirect</code>를 해주는데 현 프로젝트에서 <code>CORS</code> 에러가 발생한 부분이 이 부분이었다.<br>즉 처음 <code>Request</code>를 보내고 정상적으로 동작한다면 <code>302</code> code를 받고 로그인 창으로 이동하고, 유저가 로그인을 하면 내부적으로 인증 과정이 동작해야하는데 <code>302</code> 코드가 아닌 <code>405</code> 코드를 반환하면서 에러가 발생했다.</p><ul><li>302, 405 Status Code</li></ul><blockquote><p>3으로 시작하는 코드는 Redirection을 의미한다. 그 중 302는 Found로 리퀘스트된 리소스에 새로운 URI가 할당되어 있고 그 URI를 참조하라는 의미이다. 301,302,303 코드가 되돌아오면 대부분 브라우저에서는 POST를 GET으로 바꾸어 리퀘스트의 엔티티 바디를 삭제하고 리퀘스트를 자동적으로 재송신하도록 되어있다.</p></blockquote><blockquote><p>405 코드는 Method Not Allowed. 허용되지 않은 메소드를 호출한 것을 의미한다.</p></blockquote><h2 id="Error-Message"><a href="#Error-Message" class="headerlink" title="Error Message"></a>Error Message</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource.</span><br><span class="line">&gt; OPTIONS https://LOGIN-ENDPOINT/login&amp;response_type=code&amp;scope=email%20profile&amp;state=6Zy6nR 405</span><br><span class="line"></span><br><span class="line">Access to XMLHttpRequest at &apos;https://accounts.google.com/o/oauth2/v2/auth?client_id=CLIENT_ID_VALUE&amp;redirect_uri=http://LOGIN-ENDPOINT/login&amp;response_type=code&amp;scope=email%20profile&amp;state=6Zy6nR&apos; from origin &apos;https://REQUESTER&apos; has been blocked by CORS policy: Response to preflight request doesn&apos;t pass access control check: No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource.</span><br></pre></td></tr></table></figure><p>처음에 뜬 에러는 이 메세지가 아닐수도 있다. 어느 쪽 코드가 잘못된 것인지 많은 경우의 수가 있어서 Front 코드 하나 Server 코드 하나하나 수정해가면서 서버에 배포해서 확인하느라 하나하나 기록하지는 못했다. 우선 트러블슈팅 후반부(?)에 계속 참고한 에러 메세지는 이것이었다.<br>(이외에도 request시 origin이 null이 된다는 등 다양한 에러가 계속 발생했었다.)</p><h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><p>우선 서버에 문제가 있나 확인하기 위해서 <code>curl</code> 명령어로 확인을 해보았다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl \                                     </span><br><span class="line">  --verbose \</span><br><span class="line">  --request GET \</span><br><span class="line">  &apos;https://LOGIN-ENDPOINT/login&apos; \</span><br><span class="line">  --header &apos;Origin: http://REQUESTER&apos; \</span><br><span class="line">  --header &apos;Access-Control-Request-Headers: Origin, Accept, Content-Type&apos; \</span><br><span class="line">  --header &apos;Access-Control-Request-Method: GET&apos;</span><br></pre></td></tr></table></figure><p>curl에서는 정상적으로 <code>302</code> 코드를 반환하였다. 즉 서버의 문제가 아닌 <code>React</code>와 합쳐서 배포하는 과정에서 생긴 이슈인 것을 알았다.</p><hr><ul><li><p>CORS 동작과정 (<a href="https://www.popit.kr/corss-domain-api-서버-구성/" target="_blank" rel="noopener">참고링크</a>)</p><ul><li>브라우저는 다른 도메인으로 Ajax 등의 호출을 보내기 전에 다음과 같은 순서로 동작합니다.  </li></ul><ol><li>“preflight” 확인 요청을 OPTIONS method로 전송(요청 시 Http Header의 속성으로 “Origin”에 자신의 도메인을 전송) </li><li>이 요청을 받은 서버는 정상적인 요청인지 확인하여, 정상적인 요청이면 Response에 허용 가능한 도메인(Access-Control-Allow-Origin), Method(Access-Control-Allow-Methods), Header 속성(Access-Control-Allow-Headers) 등을 설정하여 응답  </li><li>OPTIONS 요청에 대해 수신을 받은 브라우저는 Header의 “Access-Control-Allow-*” 정보를 이용하여 요청을 보낼 수 있는지 판단하여 권한이 없는 경우 위와 같은 에러 처리를 하고 요청을 보낼 수 있으면 요청 전송</li></ol></li></ul><hr><p>위 에러 메세지를 기반으로 여러가지를 찾아봤는데 초기에는 Front 쪽에서 API를 호출할 때 Header에 CORS 허용을 하지 않아서(<code>Access-Control-Allow-Origin</code> 설정) 많은 시간을 허비했다. 하지만 이 이후에도 CORS 에러가 해결되지 않았다. 그리고 위 링크에서 Spring을 사용하는 경우 <code>@CrossOrigin</code> 어노테이션으로 쉽게 해결할 수 있다 했지만 OAuth Social Login Endpoint의 경우 <strong>컨트롤러를 직접 만드는 것이 아니기 때문에 위 문제로 해결할 수 없었다.</strong><br>(login / logout endpoint외에는 전부 Controller로 작성했기 때문에 CORS 관련 Config 설정을 하기 전에 임시로 @CrossOrigin 어노테이션을 붙여뒀다. 이 어노테이션을 붙이는 경우 Front에서 <code>Access-Control-Allow-Origin</code> 설정을 하지 않아도 API 호출에 CORS 에러가 발생하지 않는다. 이 부분 때문에 좀 더 헷갈렸던 것도 있다.)</p><p><code>405</code>를 반환한다는 것은 허용되지 않은 메소드를 호출했다는 것인데 그래서 이후에는 <code>preflight</code> 확인 요청을 <code>OPTIONS method</code>로 보내는 과정에 문제가 있는지 찾아보았다.</p><p>이 <a href="https://oddpoet.net/blog/2017/04/27/cors-with-spring-security/" target="_blank" rel="noopener">링크</a>를 참고해서 <code>Spring Security Config</code>에 <code>PreFlightRequest</code>를 허용해주었지만 이 코드도 동작하지 않았다.</p><p>혹시나해서 Front쪽에서 <code>axios</code>가 아닌 <code>XMLHttpRequest</code>를 직접 사용해봤지만 새로운 에러만 발생했다. </p><blockquote><p>찾아본 바로는 오히려 OAuth 기반 서비스는 XHR이나 Fetch API를 사용하면 안된다고 한다.</p></blockquote><p><code>Spring Security Config</code>에 <code>OPTIONS</code>를 전부 허용하고(permitAll), <code>CORS Filter</code>를 인증 필터 제일 앞단에 위치하도록 코드도 작성했지만 이 문제도 실패했다.</p><p>이쯤 되니 혹시 배포 서버에 설정한 <code>Reverse Proxy Server</code>의 <code>Nginx</code> 설정이 문제일까 의심이 들어서 설정을 몇개 수정해보았지만 감이 잡히지 않았다. (<a href="http://oskarhane.com/avoid-cors-with-nginx-proxy_pass/" target="_blank" rel="noopener">Avoid cors with nginx proxy pass 참고</a>) (Nginx 설정은 지정한 도메인으로 http나 https 요청이 들어오면 https를 가리키도록 하는 것이 다였다.)</p><p>아무리 생각해도 코드 레벨에서 서버에서 할 수 있는 모든 설정을 다 한 것 같았다. 처음 <code>get</code>으로 login uri를 호출할 때는 Server 기준에서 호출하는데 이후 302 코드를 받고 자동으로 다시 리다이렉트 uri를 호출하는 과정에 Front 기준으로 호출해서 이런 에러가 발생한 것 같았다.</p><p>이후 찾아본 <a href="https://stackoverflow.com/questions/45602875/trying-to-redirect-client-to-google-oauth-getting-405-error" target="_blank" rel="noopener">StackOverFlow 링크</a>에서 힌트를 얻었다.</p><p>3xx의 상태코드를 받으면 브라우저가 자동으로 클라이언트를 대신해 반환된 위치로 <code>get</code> 요청을 보내는데 이를 Front에서 캐치해서 수동으로 redirection을 하라는 답변이었다.<br>여기에 힌트를 얻어서 Front에서 <code>window.locaion</code>으로 새창을 띄워 login api를 호출하니 자동으로 redirect되며 문제가 해결되었다. 새로 띄운 창에서는 Front 코드의 영향을 받지 않아서 Server의 설정대로 잘 동작을 한 것 같다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>이번 프로젝트로 <code>CORS</code>의 동작방식과 <code>OPTIONS</code> 메소드와 <code>preflight</code>에 대해 많이 알게되었다. 지금 해결한 방식이 완벽한 해결방식은 아니고 우회한 방법에 가깝다고 생각하지만 현재로써는 이 이상 해결하긴 어려울 것 같다. 그리고 아예 MSA로 분리하면 분리했지 애매하게 붙여서 배포하는 것이 에러가 발생했을 때 더 확인하기 어렵다는 것을 알았다. Front와 Server를 분리해서 개발하면서 배포는 함께 하니까 이렇게 <em>배포했을 때 어느 부분에서 에러가 발생했는지 조차 모르는 경우 에러를 추적하기가 어려웠다.</em>   </p><p>프로젝트를 하면서 느낀 것은 개발자가 본인의 API가 postman 등 테스트 도구를 이용해 API 동작이 정상적으로 되는 것을 확인하여도 <em>내가 개발한 API가 잘못되었을 수 있다는 생각을 갖는게 중요하다는 점이었다.</em> 만약 나 또는 상대 개발자가 서로 자신의 코드가 잘못되었을 수 있다는 가정을 하지 않았다면 이 문제를 해결하는데 더 오래걸렸을 것이다. 이전 프로젝트에서도 자신의 코드가 무조건 옳다고 주장한 경우가 있어서 상대방의 코드를 전부 뜯어보느라 해결하는데 오래 걸린 경우가 있었다.<br>알고있는 분야가 서로 다르므로 서로 열린 마음으로 자신이 아는 부분, 고민하는 부분을 함께 교류하고 소통해야한다고 생각한다. 그리고 그렇게해서 이 문제를 해결할 수 있었던 것 같다. 개발자로써 좀 더 상대방과 소통할 수 있는 개발자가 되어야겠다는 생각이 든다. </p><h3 id="참고한-링크들"><a href="#참고한-링크들" class="headerlink" title="참고한 링크들"></a>참고한 링크들</h3><ul><li><a href="https://www.popit.kr/corss-domain-api-%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%84%B1/" target="_blank" rel="noopener">https://www.popit.kr/corss-domain-api-%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%84%B1/</a></li><li><a href="https://oddpoet.net/blog/2017/04/27/cors-with-spring-security/" target="_blank" rel="noopener">https://oddpoet.net/blog/2017/04/27/cors-with-spring-security/</a></li><li><a href="https://www.popit.kr/cors-preflight-인증-처리-관련-삽질/" target="_blank" rel="noopener">https://www.popit.kr/cors-preflight-인증-처리-관련-삽질/</a></li><li><a href="https://homoefficio.github.io/2015/07/21/Cross-Origin-Resource-Sharing/" target="_blank" rel="noopener">https://homoefficio.github.io/2015/07/21/Cross-Origin-Resource-Sharing/</a></li><li><a href="https://medium.com/@muiruri/spring-oauth2-and-cors-configuration-3529337525b4" target="_blank" rel="noopener">https://medium.com/@muiruri/spring-oauth2-and-cors-configuration-3529337525b4</a></li><li><a href="http://oskarhane.com/avoid-cors-with-nginx-proxy_pass/" target="_blank" rel="noopener">http://oskarhane.com/avoid-cors-with-nginx-proxy_pass/</a></li><li><a href="https://stackoverflow.com/questions/45602875/trying-to-redirect-client-to-google-oauth-getting-405-error" target="_blank" rel="noopener">https://stackoverflow.com/questions/45602875/trying-to-redirect-client-to-google-oauth-getting-405-error</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;SpringBoot&lt;/code&gt; 프로젝트에 &lt;code&gt;OAuth2&lt;/code&gt; 소셜 로그인을 구현하는 프로젝트에서 발생한 문제이다. 작은 규모의 프로젝트였기 때문에 SpringBoot와 View단의 &lt;code&gt;ReactJS&lt;/code&gt;
      
    
    </summary>
    
      <category term="Troubleshooting" scheme="https://kodakyung.github.io/categories/Troubleshooting/"/>
    
    
      <category term="SpringBoot" scheme="https://kodakyung.github.io/tags/SpringBoot/"/>
    
      <category term="OAuth2" scheme="https://kodakyung.github.io/tags/OAuth2/"/>
    
      <category term="Troubleshooting" scheme="https://kodakyung.github.io/tags/Troubleshooting/"/>
    
      <category term="ReactJS" scheme="https://kodakyung.github.io/tags/ReactJS/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ에서 SpringBoot DevTools 사용하기</title>
    <link href="https://kodakyung.github.io/2019/06/11/old-post-IntelliJ-2019-06-11-intellij-devtools/"/>
    <id>https://kodakyung.github.io/2019/06/11/old-post-IntelliJ-2019-06-11-intellij-devtools/</id>
    <published>2019-06-10T15:00:00.000Z</published>
    <updated>2019-07-15T07:11:54.730Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot의 경우 정적 리소스(html,css,js 등)들을 <code>resource</code> 폴더 하위에서 관리하기 때문에 정적 리소스를 갱신하기 위해 <code>Tomcat</code>을 재시작해야한다.</p><p><code>DevTools</code> 를 사용하면 자동으로 정적 리소스를 <code>reload</code> 할 수 있게 된다.</p><p>하지만 IntelliJ에서 사용시 DevTools을 추가해도 적용이 안되는 경우가 있다.</p><blockquote><p>intellij devtools not working</p></blockquote><p>이 때 IntelliJ에서 추가적인 설정을 해주어야 한다.</p><ul><li>IntelliJ에서 DevTool 사용하기</li></ul><p><img src="/images/2019-06-11/intellij-devtools1.png" alt="devtools1"></p><ul><li><code>cmd + shift + a</code> : <code>registry</code> 검색</li></ul><p><img src="/images/2019-06-11/intellij-devtools2.png" alt="devtools2"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SpringBoot의 경우 정적 리소스(html,css,js 등)들을 &lt;code&gt;resource&lt;/code&gt; 폴더 하위에서 관리하기 때문에 정적 리소스를 갱신하기 위해 &lt;code&gt;Tomcat&lt;/code&gt;을 재시작해야한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;
      
    
    </summary>
    
      <category term="Server" scheme="https://kodakyung.github.io/categories/Server/"/>
    
      <category term="Spring" scheme="https://kodakyung.github.io/categories/Server/Spring/"/>
    
    
      <category term="SpringBoot" scheme="https://kodakyung.github.io/tags/SpringBoot/"/>
    
      <category term="IntelliJ" scheme="https://kodakyung.github.io/tags/IntelliJ/"/>
    
  </entry>
  
  <entry>
    <title>Java - Use overloading judiciously</title>
    <link href="https://kodakyung.github.io/2019/04/18/old-post-EffectiveJava-2019-04-18-Java-Use-overloading-judiciously/"/>
    <id>https://kodakyung.github.io/2019/04/18/old-post-EffectiveJava-2019-04-18-Java-Use-overloading-judiciously/</id>
    <published>2019-04-17T15:00:00.000Z</published>
    <updated>2019-07-14T14:40:57.841Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Effective-Java-Item-52"><a href="#Effective-Java-Item-52" class="headerlink" title="Effective Java Item 52"></a>Effective Java Item 52</h2><blockquote><p>다중정의(Overloading)는 신중히 사용하라</p></blockquote><h3 id="Overriding-VS-Overloading"><a href="#Overriding-VS-Overloading" class="headerlink" title="Overriding VS Overloading"></a>Overriding VS Overloading</h3><ul><li><code>Overriding</code>한 메소드는 <code>동적</code>으로 선택되고, <code>Overloading</code>한 메소드는 <code>정적</code>으로 선택된다.</li><li>따라서 <code>Overloading</code>의 경우 <strong>해당 객체의  타입</strong>이 어떤 메소드를 호출할지 <strong>기준</strong>이 된다.</li></ul><h4 id="Overriding-예"><a href="#Overriding-예" class="headerlink" title="Overriding 예"></a>Overriding 예</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Class Wine &#123;</span><br><span class="line">  <span class="function">String <span class="title">name</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="string">"포도주"</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">Class SparklingWine extends Wine &#123;</span><br><span class="line">  <span class="meta">@Override</span> <span class="function">String <span class="title">name</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="string">"발포성 포도주"</span>&#125;; <span class="comment">// Overriding</span></span><br><span class="line">&#125;</span><br><span class="line">Class Champagne extends SparklingWine &#123;</span><br><span class="line">  <span class="meta">@Override</span> <span class="function">String <span class="title">name</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="string">"샴페인"</span>&#125;; <span class="comment">// Overriding</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Class Overriding &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Wine&gt; wineList = List.of(</span><br><span class="line">      <span class="keyword">new</span> Wine(), <span class="keyword">new</span> SparklingWine(), <span class="keyword">new</span> Champagne());</span><br><span class="line">    <span class="keyword">for</span>(Wine wine : wineList)</span><br><span class="line">      System.out.println(wine.name()); <span class="comment">// Overriding한 메소드 호출</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/WegraLee/effective-java-3e-source-code/tree/master/src/effectivejava/chapter8/item52" target="_blank" rel="noopener">출처</a></p></blockquote><ul><li>기대한 대로 “포도주, “발포성 포도주”, “샴페인”순으로 출력된다.</li><li>가장 하위에 정의한 재정의 메소드가 실행되기 때문</li></ul><h4 id="Overloading-예"><a href="#Overloading-예" class="headerlink" title="Overloading 예"></a>Overloading 예</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionClassifier</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">classify</span><span class="params">(Set&lt;?&gt; s)</span></span>&#123; <span class="comment">// Overloading</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"집합"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">classify</span><span class="params">(List&lt;?&gt; list)</span></span>&#123; <span class="comment">// Overloading</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"리스트"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">classify</span><span class="params">(Collection&lt;?&gt; c)</span></span>&#123; <span class="comment">// Overloading</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"그 외"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Collection&lt;?&gt;[] collections = &#123;</span><br><span class="line">      <span class="keyword">new</span> HashSet&lt;String&gt;(),</span><br><span class="line">      <span class="keyword">new</span> ArrayList&lt;BigInteger&gt;(),</span><br><span class="line">      <span class="keyword">new</span> HashMap&lt;String, String&gt;().values()</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(Collection&lt;?&gt; c : collections)</span><br><span class="line">      System.out.println(classify(c)); <span class="comment">// Overloading한 메소드 호출</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/WegraLee/effective-java-3e-source-code/tree/master/src/effectivejava/chapter8/item52" target="_blank" rel="noopener">출처</a></p></blockquote><ul><li>예상과는 다르게 “그 외”를 3회 출력한다.</li><li><code>Overloading</code>은 <strong>컴파일 타임</strong>에 <strong>타입</strong>이 결정되기 때문이다.</li><li>해당 코드에서는 컴파일 타임에 항상 <code>Collection&lt;?&gt;</code> 타입으로 받아 <code>Overloading</code>에 영향을 주지 못했다.</li></ul><h3 id="다중정의-Overloading-시-주의할-점"><a href="#다중정의-Overloading-시-주의할-점" class="headerlink" title="다중정의(Overloading)시 주의할 점"></a>다중정의(Overloading)시 주의할 점</h3><ul><li><code>일반적으로 프로그래머가 기대하는 코드</code>와 <code>다른 결과</code>를 보여주는 헷갈릴 수 있는 코드는 작성하지 않는 것이 좋다.</li><li>특히 공개 API의 경우 사용자가 매개변수를 넘길때 어떤 <code>다중정의된 메소드</code>가 동작할지 <code>예측</code>되지 않는다면 더 좋지 않다.</li><li>서로 다른 <code>함수형 인터페이스라</code>도 <code>같은 위치의 인수</code>로 받아선 안된다. </li></ul><h3 id="그나마-안전하게-다중정의-Overloading-하려면"><a href="#그나마-안전하게-다중정의-Overloading-하려면" class="headerlink" title="그나마 안전하게 다중정의(Overloading) 하려면"></a>그나마 안전하게 다중정의(Overloading) 하려면</h3><ol><li><code>매개변수 수</code>가 같은 다중정의를 가급적 피한다.</li><li><code>가변인수</code>를 사용하는 메소드는 절대 다중정의하지 않는다.<ul><li>아이템 53</li></ul></li><li>다중정의 대신 <code>메소드 이름</code>을 다르게 지어준다.<ul><li>ex) <code>ObjectOutputStream</code> Class의 <code>write</code> 메소드 들 &gt; <code>writeBoolean(boolean)</code>, <code>writeInt(int)</code>, …</li></ul></li><li>1~3을 지키기 어려운 <code>생성자</code>의 경우 매개변수를 형변환해 정확한 메소드가 선택되도록 한다.</li><li><code>매개변수 수</code>가 같은 다중정의 메소드가 많은 경우 그 매개변수 중 하나 이상이 “근본적으로 다르다(radically different)”면 괜찮다.<ul><li>“근본적으로 다르다”는 “두 타입이 (null 제외) 서로 어느 쪽으로도 형변환할 수 없다는 뜻”</li></ul></li><li>5가 되지 않는다면 <code>같은 객체</code>를 <code>입력</code>받는 <code>다중 메소드</code>가 모두 <code>같은 동작</code>을 하도록한다.<ul><li>ex) 기존 클래스를 수정해 새로운 Interface를 implements 하는 경우<ul><li>기존에 있던 String 클래스에 <code>CharSequence</code> 인터페이스 등장 후 기존에 있던 <code>contentEquals(StringBuffer)</code> 메소드가 <code>contentEquals(CharSequence)</code>로 다중 정의 되었지만 같은 동작을 하기 때문에 사용자 입장에서 문제가 없다. </li></ul></li></ul></li><li>서로 다른 <code>함수형 인터페이스</code>라도 같은 위치의 인수로 받지 않는다.</li></ol><h3 id="생성자-다중정의-Overloading"><a href="#생성자-다중정의-Overloading" class="headerlink" title="생성자 다중정의(Overloading)"></a>생성자 다중정의(Overloading)</h3><ul><li>생성자는 이름을 다르게 지을 수 없기 때문에 위의 1~3 규칙을 적용하기 어렵다.</li><li>이때는 <code>정적 팩터리</code>를 사용한다.</li><li>그래도 생성자는 재정의가 안되기 때문에 다중정의와 혼용될 가능성은 적다.</li><li>5의 규칙을 따라서 다중정의 한다면 다중정의 메소드 중 어떤 메소드를 선택해 호출할 지 매개변수의 런타임 타입으로 결정된다. </li></ul><h3 id="함수형-인터페이스의-다중정의"><a href="#함수형-인터페이스의-다중정의" class="headerlink" title="함수형 인터페이스의 다중정의"></a>함수형 인터페이스의 다중정의</h3><ul><li>“<code>암시적 타입 람다식</code>이나 <code>부정확한 메소드 참조</code> 같은 표현식은 목표 타입이 선택되기 전까지 의미가 정해지지 않기 때문에 적용성 테스트 때 무시된다.” 고 책에서 말한다.<ul><li>부정확한 메소드 참조 타입이란 메소드와 인자 모두 다중 정의된 경우를 뜻한다. </li></ul></li><li>말이 어려운데, 간단히 말하자면 정확한 타입이 정해지기 전까지는 의도한대로 동작하지 않는다는 말이다.</li><li>따라서 <code>함수형 인터페이스</code>는 서로 다른 타입이어도 결과적으로 Overloading 때 같은 타입으로 인식한다. </li></ul><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ul><li>다중정의된 메소드 중 하나를 선택하는 규칙은 복잡하기 때문에 프로그래머가 모두 알고 프로그래밍하기는 어렵다. </li><li>따라서 매개변수가 같을 때는 가급적 다중정의를 피하거나 그것이 안된다면 안전하게 다중정의하는 규칙을 따라 만드는 것이 좋다.</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>Effective Java (3rd Edition)</li><li><a href="https://jeong-pro.tistory.com/148" target="_blank" rel="noopener">JVM 구조와 자바 런타임 메모리 구조</a></li></ul><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Effective-Java-Item-52&quot;&gt;&lt;a href=&quot;#Effective-Java-Item-52&quot; class=&quot;headerlink&quot; title=&quot;Effective Java Item 52&quot;&gt;&lt;/a&gt;Effective Java Item 
      
    
    </summary>
    
      <category term="Programming" scheme="https://kodakyung.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/categories/Programming/Java/"/>
    
    
      <category term="Effective Java" scheme="https://kodakyung.github.io/tags/Effective-Java/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java - Design method signatures carefully</title>
    <link href="https://kodakyung.github.io/2019/04/17/old-post-EffectiveJava-2019-04-17-Java-Design-method-signatures-carefully/"/>
    <id>https://kodakyung.github.io/2019/04/17/old-post-EffectiveJava-2019-04-17-Java-Design-method-signatures-carefully/</id>
    <published>2019-04-16T15:00:00.000Z</published>
    <updated>2019-07-14T14:40:35.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Effective-Java-Item-51"><a href="#Effective-Java-Item-51" class="headerlink" title="Effective Java Item 51"></a>Effective Java Item 51</h2><blockquote><p>메서드 시그니처를 신중히 설계하라</p></blockquote><h2 id="API-설계-요령"><a href="#API-설계-요령" class="headerlink" title="API 설계 요령"></a>API 설계 요령</h2><h3 id="1-메서드-이름을-신중히"><a href="#1-메서드-이름을-신중히" class="headerlink" title="1. 메서드 이름을 신중히"></a>1. 메서드 이름을 신중히</h3><ul><li>표준 명명 규칙을 따른다<ul><li>E.J의 아이템 68 참고</li></ul></li></ul><h3 id="2-지나친-편의-메서드-남발-금물"><a href="#2-지나친-편의-메서드-남발-금물" class="headerlink" title="2. 지나친 편의 메서드 남발 금물"></a>2. 지나친 편의 메서드 남발 금물</h3><ul><li>아주 자주 쓰일 때만 별도의 편의 메서드로 작성한다.<ul><li>이 부분에 관점에 따라 상충되는 듯하다. </li><li>예를 들면 박재성(자바지기)님의 경우 Test를 위해 가급적 메소드를 잘게 쪼개는 것을 추천한다. 즉 한번에 한가지 기능만 갖고 있는 원자성을 띄는 메소드를 작성하는걸 추천한다. </li><li>이 책의 저자는 메소드가 너무 많은 경우 클래스를 익히고 사용하는게 어렵기 때문에 추천하지 않는다고 한다.</li><li><del>알아서 걸러듣자..</del></li></ul></li></ul><h3 id="3-매개변수-목록은-가능한-짧게"><a href="#3-매개변수-목록은-가능한-짧게" class="headerlink" title="3. 매개변수 목록은 가능한 짧게"></a>3. 매개변수 목록은 가능한 짧게</h3><ul><li>4개 이하가 좋다고 한다.</li><li>특히 같은 타입의 매개변수가 여러개 나오는 경우가 좋지 않은 경우다. 왜냐하면 실수로 순서를 바꿔 입력해도 컴파일러가 눈치채지 못하기 때문.</li></ul><h3 id="4-매개변수-타입은-클래스보단-인터페이스로"><a href="#4-매개변수-타입은-클래스보단-인터페이스로" class="headerlink" title="4. 매개변수 타입은 클래스보단 인터페이스로"></a>4. 매개변수 타입은 클래스보단 인터페이스로</h3><ul><li>아이템 64</li><li>클래스를 인자로 받는다면 매개변수를 특정 구현체로 한정하기 때문에 좋지 않다.</li></ul><h3 id="5-Boolean-보다-원소-2개인-Enum-타입으로"><a href="#5-Boolean-보다-원소-2개인-Enum-타입으로" class="headerlink" title="5. Boolean 보다 원소 2개인 Enum 타입으로"></a>5. Boolean 보다 원소 2개인 Enum 타입으로</h3><ul><li>의미상 Boolean이 더 나은경우가 아니라면 열거체를 사용하는게 좋다.</li><li>왜냐하면 코드상 의미가 더 명확하기 때문</li><li>또한 개별 열거타입별 의존성을 추가해주기도 좋다. (열거타입 내부 메소드로)</li></ul><br><h3 id="긴-매개변수를-짧게-줄이는-기술들"><a href="#긴-매개변수를-짧게-줄이는-기술들" class="headerlink" title="긴 매개변수를 짧게 줄이는 기술들"></a>긴 매개변수를 짧게 줄이는 기술들</h3><h4 id="1-여러-메서드로-쪼갠다"><a href="#1-여러-메서드로-쪼갠다" class="headerlink" title="1. 여러 메서드로 쪼갠다."></a>1. 여러 메서드로 쪼갠다.</h4><ul><li>API 설계 요령 2번과 상충되는 것 같지만, API를 공통점이 없는 기능으로 잘 분리한다면 결과적으로 매개변수의 길이가 줄어들 수 있다.</li><li>잘게 쪼개둘수록 여러가지로 조합할 수 있기 때문</li></ul><h4 id="2-도우미-클래스를-만든다"><a href="#2-도우미-클래스를-만든다" class="headerlink" title="2. 도우미 클래스를 만든다."></a>2. 도우미 클래스를 만든다.</h4><ul><li>매개변수 여러개를 묶는 도우미 클래스를 만든다.</li><li>매개변수 몇 개를 독립된 하나의 단위로 볼 수 있는 경우</li><li>ex) 카드게임에서 카드를 의미하는 부분</li></ul><h4 id="3-메서드에-빌더-Builder-패턴을-응용한다"><a href="#3-메서드에-빌더-Builder-패턴을-응용한다" class="headerlink" title="3. 메서드에 빌더(Builder)패턴을 응용한다."></a>3. 메서드에 빌더(Builder)패턴을 응용한다.</h4><ul><li>매개변수가 많은데, 그 중 일부는 생략해도 되는 경우 도움이 된다.</li></ul><br><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>Effective Java (3rd Edition)</li></ul><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Effective-Java-Item-51&quot;&gt;&lt;a href=&quot;#Effective-Java-Item-51&quot; class=&quot;headerlink&quot; title=&quot;Effective Java Item 51&quot;&gt;&lt;/a&gt;Effective Java Item 
      
    
    </summary>
    
      <category term="Programming" scheme="https://kodakyung.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/categories/Programming/Java/"/>
    
    
      <category term="Effective Java" scheme="https://kodakyung.github.io/tags/Effective-Java/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java - Make defensive copies when needed</title>
    <link href="https://kodakyung.github.io/2019/04/10/old-post-EffectiveJava-2019-04-10-Java-Make-defensive-copies-when-needed/"/>
    <id>https://kodakyung.github.io/2019/04/10/old-post-EffectiveJava-2019-04-10-Java-Make-defensive-copies-when-needed/</id>
    <published>2019-04-09T15:00:00.000Z</published>
    <updated>2019-07-14T14:40:20.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Effective-Java-Item-50"><a href="#Effective-Java-Item-50" class="headerlink" title="Effective Java Item 50"></a>Effective Java Item 50</h2><blockquote><p>적시에 방어적 복사본을 만들라</p></blockquote><ul><li>자바는 비교적 안전한 언어이지만, <code>불변식</code>이 깨질 수 있다는 가정하에 최대한 방어적으로 프로그래밍해야한다. </li><li>어떤 객체든 허락없이 외부에서 내부를 수정하는 일은 불가해야한다. </li><li>가변 타입으로 작성된 코드도 불변식을 깨지지 않게 하기 위해 필요하다.</li><li>자기 자신 외에는 가변 필드에 접근할 수 없도록해야 완벽한 캡슐화이다.</li></ul><h3 id="가변-매개변수를-받는-경우"><a href="#가변-매개변수를-받는-경우" class="headerlink" title="가변 매개변수를 받는 경우"></a>가변 매개변수를 받는 경우</h3><ul><li>책의 <a href="https://github.com/WegraLee/effective-java-3e-source-code/blob/master/src/effectivejava/chapter8/item50/Period.java#L15" target="_blank" rel="noopener">Period</a> 객체를 보면 불변 같아 보이지만 생성자로 받는 <code>Date</code>가 가변이기 때문에 불변식이 깨진다.</li><li>불변식을 유지하기 위해 간단하게는 대신할 수 있는 <code>불변 아이템</code>을 사용하거나 가변 매개변수를 각각 <code>방어적으로 복사</code>해야한다.</li></ul><h4 id="방어적-복사-defensive-copy"><a href="#방어적-복사-defensive-copy" class="headerlink" title="방어적 복사(defensive copy)"></a>방어적 복사(defensive copy)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Period</span><span class="params">(Date start, Date end)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 생성자에서 방어적 복사 수행</span></span><br><span class="line">    <span class="comment">// 가변 인자를 받아서 새 객체를 생성해 복사한다.</span></span><br><span class="line">    <span class="keyword">this</span>.start = <span class="keyword">new</span> Date(start.getTime()); </span><br><span class="line">    <span class="keyword">this</span>.end = <span class="keyword">new</span> Date(end.getTime());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 방어적 복사를 진행한 뒤 유효성을 검사한다.</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.start.compareTo(<span class="keyword">this</span>.end) &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="keyword">this</span>.start + <span class="string">" after "</span> + <span class="keyword">this</span>.end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>반드시 매개변수 유효성 검사를 하기 전에 방어적 복사를 해야한다. </li><li>TOCTOU(time-of-check/time-of-use) 공격. 즉, 유효성 검사 후 복사를 실행하는 사이에 원본 객체가 수정될 위험이 있기 때문이다.</li><li>생성자 뿐만 아니라 접근자(setter)에서도 Date 객체를 반환한다면 공격당할 수 있기 때문에 setter에서도 방어적 복사를 해주는 것이 좋다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 접근자에서 방어적 복사 수행</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Date(start.getTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="clone-사용-여부"><a href="#clone-사용-여부" class="headerlink" title="clone 사용 여부"></a>clone 사용 여부</h4><ul><li>매개 변수가 불변 객체가 아닐 경우 방어적 복사본을 만드는 데 <code>clone</code>을 사용하면 안된다.</li><li>악의 적인 하위 클래스가 clone을 정의한 경우 공격받을 수 있기 때문이다.</li><li>그 외에도 Item13의 이유로 clone 사용을 지양하는 것이 좋다. </li></ul><h3 id="그래서-방어적복사를-언제-해야하는데"><a href="#그래서-방어적복사를-언제-해야하는데" class="headerlink" title="그래서 방어적복사를 언제 해야하는데?"></a>그래서 방어적복사를 언제 해야하는데?</h3><ul><li>메서드나 생성자나 클라이언트가 제공한 객체의 참조를 내부에 저장하는 경우 객체가 변경될 가능성이 있는지 생각해야한다.</li><li>변경될 수 있는 객체라면 변경된 후 클래스가 문제 없이 동작할지 고려해본다.</li><li>이 때 확신할 수 없다면 복사본을 만들어 저장해라</li><li>반대로 내부 객체를 외부에 전달할 때 안심할 수 없다면 방어적 복사를 해야한다. </li><li>내부에서 사용하는 배열을 외부에 반환할 때는 항상 방어적 복사를 해라.(Item15 참고)</li></ul><h3 id="방어적-복사를-생략하는-경우"><a href="#방어적-복사를-생략하는-경우" class="headerlink" title="방어적 복사를 생략하는 경우"></a>방어적 복사를 생략하는 경우</h3><ul><li>해당 클래스와 클라이언트가 상호 신뢰할 수 있을 때<ul><li>통제권을 이전하기 위한 메서드나 생성자의 경우 호출 후 더이상 객체를 직접 수정하지 않는다고 문서에 명시한다.</li></ul></li><li>불변식이 깨져도 그 영향이 호출한 클라이언트에만 그칠때<ul><li>ex) Wrapper Class</li></ul></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>Effective Java (3rd Edition)</li></ul><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Effective-Java-Item-50&quot;&gt;&lt;a href=&quot;#Effective-Java-Item-50&quot; class=&quot;headerlink&quot; title=&quot;Effective Java Item 50&quot;&gt;&lt;/a&gt;Effective Java Item 
      
    
    </summary>
    
      <category term="Programming" scheme="https://kodakyung.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/categories/Programming/Java/"/>
    
    
      <category term="Effective Java" scheme="https://kodakyung.github.io/tags/Effective-Java/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java - Prefer side-effect-free functions in streams</title>
    <link href="https://kodakyung.github.io/2019/03/23/old-post-EffectiveJava-2019-03-23-Java-Prefer-side-effect-free-functions-in-streams/"/>
    <id>https://kodakyung.github.io/2019/03/23/old-post-EffectiveJava-2019-03-23-Java-Prefer-side-effect-free-functions-in-streams/</id>
    <published>2019-03-22T15:00:00.000Z</published>
    <updated>2019-07-14T14:39:55.356Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Effective-Java-Item-46"><a href="#Effective-Java-Item-46" class="headerlink" title="Effective Java Item 46"></a>Effective Java Item 46</h2><blockquote><p>스트림에서는 부작용 없는 함수를 사용하라.</p></blockquote><h3 id="스트림-패러다임"><a href="#스트림-패러다임" class="headerlink" title="스트림 패러다임"></a>스트림 패러다임</h3><ul><li>스트림은 <code>함수형 프로그래밍</code> 패러다임이다. </li><li>스트림을 통해 <code>표현력</code>, <code>속도</code>, <code>병렬성</code>을 얻을 수 있다. </li><li>계산을 <code>일련의 변환</code>으로 재구성한다.</li><li>각 변환 단계를 가능한 이전 단계의 결과를 받아 처리하는 <strong>순수 함수</strong>여야한다.</li><li><strong>순수 함수란 오직 입력만이 결과에 영향을 주는 함수이다.</strong><ul><li>가변 상태를 참조하지 않고 함수 스스로도 다른 상태를 변경하지 않는다.</li></ul></li><li>즉 스트림 연산에 사용되는 함수 객체는 모두 <code>side effect</code>가 없어야한다. </li><li>스트림의 <code>for each</code>는 스트림 계산 결과를 보여주는 용도로만 사용하는 것이 좋다. </li></ul><h3 id="스트림의-수집기-Collector"><a href="#스트림의-수집기-Collector" class="headerlink" title="스트림의 수집기(Collector)"></a>스트림의 수집기(Collector)</h3><ul><li><code>java.util.stream.Collectors</code></li><li>수집기가 생성하는 객체는 일반적으로 컬렉션이다. </li><li><code>Collector</code>를 통해 스트림의 원소들을 쉽게 원소 하나(컬렉션)로 모을 수 있다. </li><li>수집기는 <code>toList()</code>, <code>toSet()</code>, <code>toCollection(collectionFactory)</code>로 <code>리스트</code>, <code>집합</code>, <code>프로그래머가 지정한 컬렉션 타입</code>을 반환한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Long&gt; freq;</span><br><span class="line">...</span><br><span class="line">List&lt;String&gt; topTen = freq.keySet().stream() <span class="comment">// (1)</span></span><br><span class="line">    .sorted(comparing(freq::get).reversed()) <span class="comment">// (2)</span></span><br><span class="line">    .limit(<span class="number">10</span>)</span><br><span class="line">    .collect(toList());</span><br></pre></td></tr></table></figure><ol><li>Map에서 key를 뽑아내 stream으로 만든다.</li><li>sorted에 비교자 생성 메서드인 comparing으로 비교 기준을 넘긴다. </li><li>단어 10개까지 뽑아서</li><li>List로 변경해 반환한다.</li></ol><ul><li>나머지 메소드들은 대부분 스트림을 맵으로 취합하는 기능을 가진다. 스트림의 각 원소는 키 하나와 값 하나에 연관되어있지만 <strong>다수의 스트림 원소가 같은 키에 연관될 수 있다.</strong> </li></ul><h3 id="맵-수집기-Map-Collector"><a href="#맵-수집기-Map-Collector" class="headerlink" title="맵 수집기(Map Collector)"></a>맵 수집기(Map Collector)</h3><ul><li><p>가장 간단한 맵 수집기는 <code>toMap(keyMapper, valueMapper)</code> 인자 2개를 받는 메소드이다.</p></li><li><p>스트림 원소를 <strong>키에 맵핑하는 함수</strong>와 <strong>값에 맵핑하는 함수</strong>를 인수로 받는다. </p></li><li><p>이 경우는 스트림의 각 원소가 고유한 키에 매핑되어 있을 때 적절하다. </p></li><li><p>더 복잡한 형태는 <code>toMap(keyMapper, valueMapper, mergeMethod)</code> 3가지를 인자로 받는 메소드로 처리한다.</p></li><li><p>병합 함수는 <code>BinaryOperator&lt;T&gt;</code>로 같은 <code>&lt;T&gt;</code> 형태의 두개의 파라미터를 받아서 람다식대로 계산하고 계산 후 결과 값도 <code>&lt;T&gt;</code> 형태로 반환한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Artist, Album&gt; topHits = albums.collect(</span><br><span class="line">  toMap(Album::artist, a-&gt;a, maxBy(comparing(Album::sales)));</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>책에서는 병합 함수로 <code>BinaryOperator</code>에서 정적 임포트한 <code>maxBy</code>라는 정적 팩터리 메소드를 사용한다.</li><li><code>maxBy</code>는 <code>Comparator&lt;T&gt;</code>를 입력 받아 <code>BinaryOperator&lt;T&gt;</code>를 반환한다. </li><li><code>comparing</code>이 비교자 생성 메서드로 키 추출 함수로 <code>Album::sales</code>를 넘겨 비교자를 반환한다.</li></ul></li><li><p>가장 복잡한 경우는 <code>toMap(keyMapper,valueMapper, mergeMethod, MapFactory)</code> 네가지 인자를 받는다. </p></li><li><p>네번째 인수로 받는 맵 팩터리는 특정 맵 구현체(TreeMap 등)를 직접 지정할 수 있다.</p></li></ul><h3 id="groupingBy"><a href="#groupingBy" class="headerlink" title="groupingBy"></a>groupingBy</h3><ul><li><p>인수로 분류 함수를 받고 입력받은 원소가 속한 카테고리를 반환한다. 그리고 이 카테고리가 맵의 키로 쓰인다.</p></li><li><p>가장 간단한 형태는 분류 함수 하나를 인수로 받아 맵을 생성하는 것이다. <code>groupingBy(classifier)</code></p></li><li><p>이때 반환된 맵에는 각 값마다 해당 카테고리에 속한 원소들을 담은 리스트가 있다. <code>Map&lt;CategoryType, List&lt;DataType&gt;&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">words.collect(groupingBy(word -&gt; alp))</span><br></pre></td></tr></table></figure></li><li><p>반환되는 수집기가 리스트외에 특정 형태로 지정하고 싶다면(위의 반환형이 List가 아닌 다른 자료 형태이길 원한다면) 다운스트림(downstream) 수집기도 표기해야한다. <code>groupingBy(classifier, downstream)</code></p></li><li><p><code>toSet()</code>을 사용하면 <code>Set</code>으로 <code>toCollection(collectionFactory)</code>을 사용하면 원하는 컬렉션 타입을 선택할 수 있다. </p></li><li><p><code>counting()</code>을 사용하는 경우 해당 카테고리에 속한 원소의 값과 매핑한 맵을 얻는다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Long&gt; freq = words</span><br><span class="line">  .collect(groupingBy(String::toLowerCase, counting()));</span><br></pre></td></tr></table></figure><ul><li><code>counting</code> 메소드를 사용해 개수를 반환하기 때문에 <code>Long</code>으로 반환된다. </li></ul></li></ul><h3 id="joining"><a href="#joining" class="headerlink" title="joining"></a>joining</h3><ul><li><code>CharSequence</code> 인스턴스 스트림에만 적용이 가능한 메소드이다.</li><li>매개 변수 없는 <code>joining()</code>은 원소들을 연결(concatenate)하는 역할을 한다.</li><li>매개 변수 하나인 <code>joining(delimiter)</code>은 구분자를 받아 연결 부위에 구분자를 삽입한다. </li><li>매개변수 3개인 <code>joining</code>은 구분자와 접두문자(prefix)와 접미문자(suffix)도 지정할 수 있다.</li></ul><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Effective-Java-Item-46&quot;&gt;&lt;a href=&quot;#Effective-Java-Item-46&quot; class=&quot;headerlink&quot; title=&quot;Effective Java Item 46&quot;&gt;&lt;/a&gt;Effective Java Item 
      
    
    </summary>
    
      <category term="Programming" scheme="https://kodakyung.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/categories/Programming/Java/"/>
    
    
      <category term="Effective Java" scheme="https://kodakyung.github.io/tags/Effective-Java/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java - Prefer method references to lambdas</title>
    <link href="https://kodakyung.github.io/2019/02/21/old-post-EffectiveJava-2019-02-21-Java-Prefer-method-references-to-lambdas/"/>
    <id>https://kodakyung.github.io/2019/02/21/old-post-EffectiveJava-2019-02-21-Java-Prefer-method-references-to-lambdas/</id>
    <published>2019-02-20T15:00:00.000Z</published>
    <updated>2019-07-14T14:39:36.064Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Effective-Java-Item-43"><a href="#Effective-Java-Item-43" class="headerlink" title="Effective Java Item 43"></a>Effective Java Item 43</h2><blockquote><p>람다보다는 메소드 참조를 사용하라</p></blockquote><br><h3 id="lambda-VS-method-reference"><a href="#lambda-VS-method-reference" class="headerlink" title="lambda VS method reference"></a>lambda VS method reference</h3><ul><li>함수 객체를 람다보다 <strong>간결</strong>하게 표현할 수 있는 것이 <code>method reference</code>(메소드 참조)이다.</li><li>이 중 <em>람다의 코드가 의미 없이 길다</em>면 또는 <em>이미 구현된 라이브러리</em>로 메소드 참조를 할 수 있다면, 메소드 참조를 사용하는 것이 낫다.</li><li>그리고 메소드 참조를 사용하는 경우 매개변수를 제거하므로, 람다의 매개변수 이름이 있어야 코드의 의미가 명확해진다면 람다를 사용하는 것이 낫다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map.merge(key, <span class="number">1</span>, (count, incr) -&gt; count+incr); <span class="comment">// lambda</span></span><br><span class="line">map.merge(key, <span class="number">1</span>, Integer::sum); <span class="comment">// method reference</span></span><br></pre></td></tr></table></figure><ul><li>항상 메소드 참조가 람다보다 간결한 것은 아니다. </li><li>메소드 참조의 경우 Class나 Obejct 이름을 항상 써야하기 때문에 <strong>같은 클래스에 있는 메소드</strong>를 사용한다면 람다 표현을 사용하는 것이 더 간결하다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service.execute(GoshThisClassNameIsHumongous::action); <span class="comment">// method reference</span></span><br><span class="line">service.execute(()-&gt;action()); <span class="comment">// lambda</span></span><br></pre></td></tr></table></figure><h2 id="method-reference의-사용"><a href="#method-reference의-사용" class="headerlink" title="method reference의 사용"></a>method reference의 사용</h2><ul><li>메소드 참조를 사용하는 경우 (1) 기존에 구현된 라이브러리를 사용하거나(ex-위의 <code>Integer::sum</code>은 Integer 클래스의 static sum 메소드를 사용한 것)</li><li>lambda 표현이 길어지는 경우(보통 3줄을 넘어가지 않는 것이 좋다) (2) 따로 메소드를 작성해 람다 대신 메소드 참조를 사용한다. </li></ul><h2 id="method-reference의-유형"><a href="#method-reference의-유형" class="headerlink" title="method reference의 유형"></a>method reference의 유형</h2><ol><li>정적 메소드 참조</li></ol><ul><li><code>Class::staticMethod</code> 형식으로 사용한다. </li><li>ex) <code>Integer::parseInt</code>는 <code>str-&gt;Integer.parseInt(str)</code>과 같다</li></ul><ol start="2"><li>한정적 인스턴스 메소드 참조</li></ol><ul><li><code>object::instanceMethod</code></li><li>(1)의 정적 메소드 참조와 비슷하다. </li><li>즉, 함수 객체가 받는 인수와 참조 되는 메소드가 받는 인수가 같다.</li><li>ex) <code>Instant.now()::isAfter</code>은 <code>Instant then = Instant.now(); \n t-&gt;then.isAfter(t)</code>와 같다.</li></ul><ol start="3"><li>비한정적 인스턴스 메소드 참조</li></ol><ul><li>수신 객체를 한정하지 않는 다는 의미해서 비한정적 메소드 참조이다.</li><li>따라서 함수 객체가 받는 인수와 참조되는 메소드가 받는 인수가 다르다.</li><li>그래서 함수 객체를 적용하는 시점에 수신 객체를 알려준다. </li><li>ex) <code>String::toLowerCase</code>은 <code>str-&gt;str.toLowerCase()</code>와 같다.</li></ul><ol start="4"><li>클래스 생성자 메소드 참조</li></ol><ul><li>생성자 레퍼런스와 메소드 레퍼런스는 거의 흡사하다. </li><li>생성자 종류가 많을 경우 문맥으로 파악한다.</li></ul><ol start="5"><li>배열 생성자 메소드 참조</li></ol><br><ul><li>결과적으로 method reference를 사용하면 메소드의 모든 매개변수가 사라진다. 그러므로 lambda를 사용할 때와 같이 사용하려는 자바 라이브러리에 대한 정확한 이해가 필요하다. </li></ul><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Effective-Java-Item-43&quot;&gt;&lt;a href=&quot;#Effective-Java-Item-43&quot; class=&quot;headerlink&quot; title=&quot;Effective Java Item 43&quot;&gt;&lt;/a&gt;Effective Java Item 
      
    
    </summary>
    
      <category term="Programming" scheme="https://kodakyung.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/categories/Programming/Java/"/>
    
    
      <category term="Effective Java" scheme="https://kodakyung.github.io/tags/Effective-Java/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java - Use instance fields instead of ordinals</title>
    <link href="https://kodakyung.github.io/2019/02/20/old-post-EffectiveJava-2019-02-20-Java-Use-instance-fields-instead-of-ordinals/"/>
    <id>https://kodakyung.github.io/2019/02/20/old-post-EffectiveJava-2019-02-20-Java-Use-instance-fields-instead-of-ordinals/</id>
    <published>2019-02-19T15:00:00.000Z</published>
    <updated>2019-07-14T14:39:22.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Effective-Java-Item-35"><a href="#Effective-Java-Item-35" class="headerlink" title="Effective Java Item 35"></a>Effective Java Item 35</h2><blockquote><p>ordinal 메서드 대신 인스턴스 필드를 사용하라 </p></blockquote><br><h2 id="ordinal-method"><a href="#ordinal-method" class="headerlink" title="ordinal method"></a>ordinal method</h2><ul><li>enum 타입에 제공되는 메소드로 열거 타입에서 몇번째 위치인지를 반환한다. </li><li>enum 타입과 연결된 정수가 필요할 때 이 메소드를 사용한다면 코드도 직관적이지 않고 쓰이지 않는 값도 많아질 것이다. </li></ul><h2 id="ordinal-대신-인스턴스-필드에-저장"><a href="#ordinal-대신-인스턴스-필드에-저장" class="headerlink" title="ordinal 대신 인스턴스 필드에 저장"></a>ordinal 대신 인스턴스 필드에 저장</h2><ul><li>따라서 ordinal 대신 열거 타입 상수에 연결된 값은 인스턴스 필드에 저장하는 것이 좋다. </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Ensemble &#123;</span><br><span class="line">    SOLO(<span class="number">1</span>), DUET(<span class="number">2</span>), TRIO(<span class="number">3</span>), QUARTET(<span class="number">4</span>), QUINTET(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> numberOfMusicians; </span><br><span class="line">    Ensemble(<span class="keyword">int</span> size) &#123; <span class="keyword">this</span>.numverOfMusicials = size; &#125;</span><br><span class="line">    <span class="comment">// 생성자에서 인스턴스 필드에 초기화 한다.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfMusicians</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> numberOfMusicians;&#125;</span><br><span class="line">    <span class="comment">// 메소드에서 인스턴스 필드에 저장된 값은 반환한다. </span></span><br><span class="line">    <span class="comment">// ordinal 메소드를 사용하지 않는다. </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Effective-Java-Item-35&quot;&gt;&lt;a href=&quot;#Effective-Java-Item-35&quot; class=&quot;headerlink&quot; title=&quot;Effective Java Item 35&quot;&gt;&lt;/a&gt;Effective Java Item 
      
    
    </summary>
    
      <category term="Programming" scheme="https://kodakyung.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/categories/Programming/Java/"/>
    
    
      <category term="Effective Java" scheme="https://kodakyung.github.io/tags/Effective-Java/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java - Use bounded wildcards to increase API flexibility</title>
    <link href="https://kodakyung.github.io/2019/01/31/old-post-EffectiveJava-2019-01-31-Java-Use-bounded-wildcards-to-increase-API-flexibility/"/>
    <id>https://kodakyung.github.io/2019/01/31/old-post-EffectiveJava-2019-01-31-Java-Use-bounded-wildcards-to-increase-API-flexibility/</id>
    <published>2019-01-30T15:00:00.000Z</published>
    <updated>2019-07-14T14:39:05.548Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Effective-Java-Item-31"><a href="#Effective-Java-Item-31" class="headerlink" title="Effective Java Item 31"></a>Effective Java Item 31</h2><blockquote><p>한정적 와일드카드를 사용해 API 유연성을 높여라</p></blockquote><br><ul><li>한정적 와일드 카드가 필요한 이유는 제네릭의 매개변수화 타입(<code>List&lt;String&gt;</code>, <code>List&lt;Integer&gt;</code> 등)이 불공변이기 때문이다. </li><li>불공변이라는 얘기는 서로 상위 타입도 하위 타입도 아닌 각자 다른 타입이라는 의미이다.</li><li>따라서 책의 예시와 같이 <code>Stact&lt;E&gt;</code>에 <code>Stact&lt;Number&gt;</code>를 선언후 Integer 타입을 넣으면 <code>incompatible types</code>라는 에러가 발생한다. </li><li>보다 제네릭을 유연하게 사용하기 위해 한정적 와일드카드가 필요하다.</li></ul><h3 id="lt-extends-T-gt"><a href="#lt-extends-T-gt" class="headerlink" title="&lt;? extends T&gt;"></a>&lt;? extends T&gt;</h3><ul><li>T의 하위 타입을 허용한다는 의미이다. </li><li>push 메소드와 같이 원소를 생산하는 메소드의 매개변수에 사용한다. </li><li>ex) 위처럼 <code>Number</code>로 생성 후 <code>Integer</code>로 받는게 가능해진다.</li></ul><h3 id="lt-super-T-gt"><a href="#lt-super-T-gt" class="headerlink" title="&lt;? super T&gt;"></a>&lt;? super T&gt;</h3><ul><li>T의 상위 타입을 허용한다는 의미이다. </li><li>pop 메소드와 같이 원소를 소비하는 메소드의 매개변수에 사용한다. </li><li>ex) <code>Stack&lt;Number&gt;</code> 원소를 <code>Collection&lt;Object&gt;</code>로 꺼내고 싶은 경우 </li></ul><h3 id="한정적-와일드카드-사용-규칙"><a href="#한정적-와일드카드-사용-규칙" class="headerlink" title="한정적 와일드카드 사용 규칙"></a>한정적 와일드카드 사용 규칙</h3><ul><li>입력 매개변수가 생산자나 소비자의 역할만 한다면 입력 매개변수에 와일드카드 타입을 사용해 유연성을 높이는 것이 좋다. </li><li>입력 매개변수가 생산자와 소비자 역할을 동시에 한다면 정확한 타입을 지정하는 것이 좋다. </li><li>PECS : producer-extends, consumer-super</li><li>생산자라면 <code>&lt;? extends T&gt;</code>, 소비자라면 <code>&lt;? super T&gt;</code>를 사용 </li><li>메소드의 반환 타입은 한정적 와일드 카드 타입을 사용하면 안된다. 클라이언트 쪽에서도 와일드 카드 타입을 써야하기 때문.</li><li>사용자가 와일드 카드 타입을 신경써야한다면 그 메소드는 잘못 짜여진 메소드이다. </li><li>자바 7까지는 명시적 타입 인수를 사용해야한다. </li></ul><h3 id="Comparator를-직접-구현하지-않은-경우의-한정적-와일드-카드"><a href="#Comparator를-직접-구현하지-않은-경우의-한정적-와일드-카드" class="headerlink" title="Comparator를 직접 구현하지 않은 경우의 한정적 와일드 카드"></a>Comparator를 직접 구현하지 않은 경우의 한정적 와일드 카드</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function">E <span class="title">max</span><span class="params">(List&lt;E&gt; list)</span></span></span><br></pre></td></tr></table></figure><ul><li>기존 코드를 PECS에 맞춰 변경해보면</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;? <span class="keyword">super</span> E&gt;&gt; <span class="function">E <span class="title">max</span><span class="params">(List&lt;? extends E&gt; list)</span></span></span><br></pre></td></tr></table></figure><ul><li><code>Comparable</code>은 E 인스턴스를 소비해 natural ordering에 해당하는 정수를 생산한다. </li><li>따라서 <code>Comparable</code>은 소비자의 역할이므로 <code>&lt;? super E&gt;</code>로 인스턴스를 변경한다. </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ScheduledFuture&lt;?&gt;&gt; scheduledFutures = ... ;</span><br></pre></td></tr></table></figure><ul><li>이렇게 복잡한 선언을 하는 이유는 위의 리스트와 같이 <strong>Comparable(or Comparator)를 직접 구현하지 않고 직접 구현한 다른 타입을 extends 한 경우를 지원하기 때문이다.</strong></li><li>ScheduledFuture는 직접 Comparator를 구현하지 않고 Comparator를 구현한 상위 타입을 extends 하고있다. </li><li><code>Comparable&lt;? super E&gt;</code>로 명시하지 않으면 ScheduledFuture 뿐 아니라 그 상위 클래스의 인스턴스와도 비교할 수 있기 때문에 에러가 발생한다. </li></ul><h3 id="타입-매개변수와-와일드카드-lt-E-gt-vs-lt-gt"><a href="#타입-매개변수와-와일드카드-lt-E-gt-vs-lt-gt" class="headerlink" title="타입 매개변수와 와일드카드 &lt;E&gt; vs &lt;?&gt;"></a>타입 매개변수와 와일드카드 &lt;E&gt; vs &lt;?&gt;</h3><pre><code class="java"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(List&lt;E&gt; list, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>; <span class="comment">// (1)</span><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(List&lt;?&gt; list, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> <span class="comment">// (2)</span></span></code></pre><ul><li>이 메서드를 정의할 때 <code>&lt;E&gt;</code>와 <code>&lt;?&gt;</code>는 parameter에서 같은 역할을 한다. </li><li>이 책의 필자는 public api인 경우 좀 더 깔끔한 선언을 위해 두번째 방식을 추천하고 있다.</li><li>하지만 두번째 방식의 경우 원소를 꺼낸 뒤 다시 넣을 때 에러가 날 수 있다. - List&lt;?&gt;는 null 외에 아무 값도 넣을 수 없기 때문 (parameter에서 모든 인자를 받는 역할을 함)</li><li>따라서 public api를 와일드카드(?)를 사용하고 내부적으로 값을 넣고 변경해야한다면, 와일드카드 타입의 실제 타입을 알려주는 도우미 메서드를 작성하는 것이 좋다. </li><li>도우미 메서드는 (1)의 메소드 선언과 같다. </li></ul><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Effective-Java-Item-31&quot;&gt;&lt;a href=&quot;#Effective-Java-Item-31&quot; class=&quot;headerlink&quot; title=&quot;Effective Java Item 31&quot;&gt;&lt;/a&gt;Effective Java Item 
      
    
    </summary>
    
      <category term="Programming" scheme="https://kodakyung.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/categories/Programming/Java/"/>
    
    
      <category term="Effective Java" scheme="https://kodakyung.github.io/tags/Effective-Java/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java - Don&#39;t use raw types</title>
    <link href="https://kodakyung.github.io/2019/01/28/old-post-EffectiveJava-2019-01-28-Java-Don-t-use-raw-types/"/>
    <id>https://kodakyung.github.io/2019/01/28/old-post-EffectiveJava-2019-01-28-Java-Don-t-use-raw-types/</id>
    <published>2019-01-27T15:00:00.000Z</published>
    <updated>2019-07-14T14:38:49.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Effective-Java-Item-26"><a href="#Effective-Java-Item-26" class="headerlink" title="Effective Java Item 26"></a>Effective Java Item 26</h2><blockquote><p>로 타입은 사용하지 말라. </p></blockquote><br><h3 id="제네릭-Generic"><a href="#제네릭-Generic" class="headerlink" title="제네릭(Generic)"></a>제네릭(Generic)</h3><ul><li>제네릭을 사용하는 이유는 <code>컬렉션이 담을 수 있는 타입</code>을 컴파일러에 알려주기 위한 것. </li><li>제네릭 지원 전에는 컬렉션에서 객체를 꺼낼 때마다 형변환을 해야했고, 잘못된 객체를 넣은 경우 형변환 오류가 발생했다. </li><li>제네릭을 통해 컴파일러는 형변환 코드 추가 가능, 잘못된 객체 삽입 차단 등의 기능을 수행하며, 코드를 좀 더 명확하게 해준다. </li></ul><br><h3 id="용어-정리"><a href="#용어-정리" class="headerlink" title="용어 정리"></a>용어 정리</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;T&gt; <span class="comment">// (1)(3)</span></span><br><span class="line">T <span class="comment">// (2)</span></span><br><span class="line">List&lt;String&gt; <span class="comment">// (4)</span></span><br><span class="line">List <span class="comment">// (5)</span></span><br></pre></td></tr></table></figure><ul><li>(1) 제네릭 클래스 / 제네릭 인터페이스 : 클래스와 인터페이스 선언에 타입 매개 변수(type parameter)(2)가 쓰인 것.</li><li>(3) 제네릭 타입(generic type) : (1)의 두가지를 합쳐서 일컫는 말 </li><li>(4) 매개변수화 타입(parameterized type) : <del>이 제네릭 타입은 매개변수를 정의한다.</del>고 책에 나와있는데 정확히 말하면 제네릭 타입에서 매개변수가 지정된 타입을 의미하는 것 같다. (4)는 원소의 타입이 String인 리스트를 뜻하는 매개변수화 타입. </li><li>(5) 로 타입(raw type) : 제네릭 타입 정의 시 함께 정의되는 타입. 제네릭 타입에서 타입 매개변수를 전혀 사용하지 않은 타입을 일컬음. 제네릭이 생기기 전(Java5 이전) 코드와 호환을 위해 사용됨. <strong>제네릭 타입에 속하지 않는다.</strong> </li></ul><br><h3 id="로-타입의-문제점"><a href="#로-타입의-문제점" class="headerlink" title="로 타입의 문제점"></a>로 타입의 문제점</h3><ul><li>잘못된 타입을 넣어도, 컴파일러 에러가 발생하지 않고 런타임 에러가 발생한다. </li><li>제네릭 타입이 아니기 때문에 제네릭의 안정성, 표현력을 사용할 수 없다. </li></ul><br><h3 id="매개변수화-타입을-지정했을-때-장점"><a href="#매개변수화-타입을-지정했을-때-장점" class="headerlink" title="매개변수화 타입을 지정했을 때 장점"></a>매개변수화 타입을 지정했을 때 장점</h3><ul><li>잘못된 타입을 체크해 컴파일러에서 에러를 보여준다. </li><li>컬렉션에서 원소를 꺼내는 모든 곳에서 형변환을 추가하고, 절대 실패하지 않음을 보장한다. </li></ul><br><h3 id="로-타입을-사용하는-이유"><a href="#로-타입을-사용하는-이유" class="headerlink" title="로 타입을 사용하는 이유"></a>로 타입을 사용하는 이유</h3><ul><li><strong>Java5 이전 코드와의 호환성 때문</strong></li></ul><br><h3 id="List-vs-List-lt-Object-gt-로-타입과-임의-객체-허용"><a href="#List-vs-List-lt-Object-gt-로-타입과-임의-객체-허용" class="headerlink" title="List vs List&lt;Object&gt; : 로 타입과 임의 객체 허용"></a>List vs List&lt;Object&gt; : 로 타입과 임의 객체 허용</h3><ul><li>오른쪽은 모든 타입을 허용한다고 컴파일러에 의사를 전달한 것.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(List list)</span></span>&#123; ... &#125;; <span class="comment">// (1)</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(List&lt;Object&gt; list)</span></span>&#123; ... &#125;; <span class="comment">// (2)</span></span><br></pre></td></tr></table></figure><ul><li>(1)에는 <code>List&lt;String&gt;</code> 매개변수를 넘길 수 있지만, (2)에는 넘길 수 없다. </li><li><code>List&lt;String&gt;</code>은 로타입인 <code>List</code>의 하위 타입이지만, <code>List&lt;Object&gt;</code>의 하위 타입이 아니기 때문에 불가능하다. </li><li>따라서 (2)와 달리 (1)을 사용하는 경우 타입 안정성을 잃게 된다. </li></ul><br><h3 id="List-vs-List-lt-gt-로-타입과-비한정적-와일드-카드-타입"><a href="#List-vs-List-lt-gt-로-타입과-비한정적-와일드-카드-타입" class="headerlink" title="List vs List&lt;?&gt; : 로 타입과 비한정적 와일드 카드 타입"></a>List vs List&lt;?&gt; : 로 타입과 비한정적 와일드 카드 타입</h3><ul><li>비한정적 와일드카드 타입(unbounded wildcard type)은 제네릭 타입을 쓰면서 실제 타입 매개변수를 지정하고 싶지 않은 경우에 사용한다. </li><li>왼쪽은 안전하지 않고 오른쪽은 안전하다.</li><li>로 타입의 경우 아무 원소를 넣을 수 있어 위험하고,</li><li>비한정적 와일드 카드 타입의 경우 null외에 어떤 원소도 넣을 수 없다. </li></ul><br><h4 id="비한정적-와일드-카드-타입"><a href="#비한정적-와일드-카드-타입" class="headerlink" title="비한정적 와일드 카드 타입"></a>비한정적 와일드 카드 타입</h4><ul><li>비한정적 와일드 카드 타입은 원소를 넣는 용도가 아닌 클래스나 메소드에서 어떤 제네릭 타입도 매개변수로 받기 위해 쓰이는 것 같다. </li><li>예를 들면 <code>List&lt;String&gt;</code>이 <code>List&lt;Object&gt;</code>의 하위 타입이 아니기 때문에 파라미터가 <code>List&lt;Object&gt;</code>일때 <code>List&lt;String&gt;</code>을 인자로 받는 것은 불가능하다. </li><li>이 때 비한정적 와일드 카드 타입(<code>List&lt;?&gt;</code>)을 쓰는 경우 가능하다. </li><li>그리고 특정 타입의 하위 타입으로만 제한하고 싶다면 한정적 와일드 카드를 사용한다. (<code>List&lt;? extends parentClass&gt;</code>)</li></ul><br><h3 id="로-타입을-쓰는-경우"><a href="#로-타입을-쓰는-경우" class="headerlink" title="로 타입을 쓰는 경우"></a>로 타입을 쓰는 경우</h3><ol><li>class 리터럴에는 제네릭말고 로 타입으로 표기 <ul><li>ex) <code>List&lt;String&gt;.class</code> (X) / <code>List.class</code> (O)</li></ul></li><li>instanceof 연산자로 제네릭 타입을 비교할 때 <ul><li>ex) <code>o instanceof Set&lt;String&gt;</code> (X) / <code>o instanceof Set</code> (O)</li><li>둘다 가능하지만 런타임 제네릭 타입 정보를 확인할 수 없기 때문에 왼쪽의 코드는 의미없다. </li></ul></li></ol><br><h4 id="클래스-리터럴"><a href="#클래스-리터럴" class="headerlink" title="클래스 리터럴"></a>클래스 리터럴</h4><ul><li>리터럴은 변수에 넣는 변하지 않는 데이터를 의미한다. <ul><li>ex) int i = 1; 에서 1 해당</li></ul></li><li>String은 Class 클래스의 인스턴스 </li><li>문자열 리터럴은 <code>클래스 String</code>의 인스턴스를 나타내는 표기 </li><li>클래스 리터럴은 (Hashtable.class 등) <code>클래스 Class</code>의 인스턴스를 나타내는 표기 </li></ul><br><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><ul><li><a href="https://multifrontgarden.tistory.com/104" target="_blank" rel="noopener">Java Generic</a></li><li><a href="https://code.i-harness.com/ko-kr/q/20f894" target="_blank" rel="noopener">Java 클래스 리터럴</a></li></ul><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Effective-Java-Item-26&quot;&gt;&lt;a href=&quot;#Effective-Java-Item-26&quot; class=&quot;headerlink&quot; title=&quot;Effective Java Item 26&quot;&gt;&lt;/a&gt;Effective Java Item 
      
    
    </summary>
    
      <category term="Programming" scheme="https://kodakyung.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/categories/Programming/Java/"/>
    
    
      <category term="Effective Java" scheme="https://kodakyung.github.io/tags/Effective-Java/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java - Limit source files to a single top-level class</title>
    <link href="https://kodakyung.github.io/2019/01/27/old-post-EffectiveJava-2019-01-27-Java-Limit-source-files-to-a-single-top-level-class/"/>
    <id>https://kodakyung.github.io/2019/01/27/old-post-EffectiveJava-2019-01-27-Java-Limit-source-files-to-a-single-top-level-class/</id>
    <published>2019-01-26T15:00:00.000Z</published>
    <updated>2019-07-14T14:38:31.850Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Effective-Java-Item-25"><a href="#Effective-Java-Item-25" class="headerlink" title="Effective Java Item 25"></a>Effective Java Item 25</h2><blockquote><p>톱 레벨 클래스는 한 파일에 하나만 담으라. </p></blockquote><br><ul><li>한 파일에 여러가지의 톱 레벨 클래스를 담아도 컴파일 에러가 발생하진 않는다.</li><li>하지만, <strong>컴파일러에 따라 동작이 달라질 수 있다.</strong></li></ul><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Main.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(A.NAME + B.NAME);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A.java</span></span><br><span class="line">Class A &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"aaa"</span>;</span><br><span class="line">&#125;</span><br><span class="line">Class B &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"bbb"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B.java</span></span><br><span class="line">Class A &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"ccc"</span>;</span><br><span class="line">&#125;</span><br><span class="line">Class B &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"ddd"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><ul><li>여기서 <code>Main.java</code>, <code>B.java</code> 순으로 컴파일 한다면 컴파일 오류를 </li><li><code>Main.java</code> <code>A.java</code> 순으로 컴파일 되면 “aaabbb” 출력을 </li><li><code>B.java</code>, <code>Main.java</code> 순으로 컴파일 되면 “cccddd”를 출력할 것이다. </li></ul><br><ul><li>차라리 오류가 발생하는 것이 운이 좋은 것이며, 상황에 따라 동작이 달라지는 것은 오류를 발견하기도 어렵다.</li></ul><br><ul><li>따라서 한 파일에 담긴 여러 개의 톱 레벨 클래스를 <code>파일 별로 분리</code>하거나 </li><li>정 같은 파일에 담고 싶다면 <code>정적 멤버 클래스</code>로 선언하는 것이 좋다. </li><li>다른 클래스에 딸린 부차적인 클래스라면 정적 멤버 클래스 선언이 더 낫다.</li></ul><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Effective-Java-Item-25&quot;&gt;&lt;a href=&quot;#Effective-Java-Item-25&quot; class=&quot;headerlink&quot; title=&quot;Effective Java Item 25&quot;&gt;&lt;/a&gt;Effective Java Item 
      
    
    </summary>
    
      <category term="Programming" scheme="https://kodakyung.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/categories/Programming/Java/"/>
    
    
      <category term="Effective Java" scheme="https://kodakyung.github.io/tags/Effective-Java/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java - Prefer class hierarchies to tagged classes</title>
    <link href="https://kodakyung.github.io/2019/01/24/old-post-EffectiveJava-2019-01-24-Java-Prefer-class-hierarchies-to-tagged-classes/"/>
    <id>https://kodakyung.github.io/2019/01/24/old-post-EffectiveJava-2019-01-24-Java-Prefer-class-hierarchies-to-tagged-classes/</id>
    <published>2019-01-23T15:00:00.000Z</published>
    <updated>2019-07-14T14:37:50.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Effective-Java-Item-23"><a href="#Effective-Java-Item-23" class="headerlink" title="Effective Java Item 23"></a>Effective Java Item 23</h2><blockquote><p>태그 달린 클래스보다는 클래스 계층구조를 활용하라 </p></blockquote><br><h3 id="태그-달린-클래스란"><a href="#태그-달린-클래스란" class="headerlink" title="태그 달린 클래스란 ?"></a>태그 달린 클래스란 ?</h3><ul><li>이 책에서 말하는 태그 달린 클래스는 <code>enum</code>으로 타입을 결정하고, 타입별로 쓰이는 필드와 메소드가 다른데 한 클래스에 모든 코드가 있는 경우를 일컫는다. </li><li>즉, 한 클래스에서 태그(enum)에 따라 동작을 달리하는 코드를 의미한다. </li></ul><br><h3 id="태그-달린-클래스의-단점"><a href="#태그-달린-클래스의-단점" class="headerlink" title="태그 달린 클래스의 단점"></a>태그 달린 클래스의 단점</h3><ul><li>열거타입, 태그 필드, switch문 등 <code>필요 없는 코드</code>가 많아 진다. </li><li>위의 이유로 <code>메모리</code>도 낭비하게 된다. </li><li>또한 여러 코드가 혼합되어 있어 <code>가독성</code>이 나쁘다. </li><li>프로그래머가 코드를 잘못 작성해도 <code>런타임에서 에러</code>를 확인할 수 있다. </li><li>새로운 타입을 추가하는 경우 코드를 <code>전체적</code>으로 수정해야한다. </li><li><strong>태그 클래스를 클래스 계층 구조를 흉내낸 것이기 때문에 클래스 계층 구조로 변경해주는 것이 좋다.</strong></li></ul><br><h3 id="태그-클래스를-클래스-계층-구조로"><a href="#태그-클래스를-클래스-계층-구조로" class="headerlink" title="태그 클래스를 클래스 계층 구조로"></a>태그 클래스를 클래스 계층 구조로</h3><ul><li>계층 구조의 루트가 될 <code>추상 클래스</code>를 정의한다. </li><li>태그 값에 따라 달라지는 부분을 <code>추상 메소드</code>로 선언한다. </li><li>그리고 태그 값과 상관 없이 동작이 일정한 메소드는 루트 클래스의 <code>일반 메소드</code>로 추가한다. </li><li>모든 하위 클래스에서 공통으로 사용되는 필드도 추상(루트) 클래스로 올린다. </li><li>그리고나서 루트 클래스를 <code>extends</code>한 구체 클래스를 의미별로 정의하면 된다. </li></ul><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Effective-Java-Item-23&quot;&gt;&lt;a href=&quot;#Effective-Java-Item-23&quot; class=&quot;headerlink&quot; title=&quot;Effective Java Item 23&quot;&gt;&lt;/a&gt;Effective Java Item 
      
    
    </summary>
    
      <category term="Programming" scheme="https://kodakyung.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/categories/Programming/Java/"/>
    
    
      <category term="Effective Java" scheme="https://kodakyung.github.io/tags/Effective-Java/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java - Minimize mutability</title>
    <link href="https://kodakyung.github.io/2019/01/21/old-post-EffectiveJava-2019-01-21-Java-Minimize-mutability/"/>
    <id>https://kodakyung.github.io/2019/01/21/old-post-EffectiveJava-2019-01-21-Java-Minimize-mutability/</id>
    <published>2019-01-20T15:00:00.000Z</published>
    <updated>2019-07-14T14:37:55.129Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Effective-Java-Item-17"><a href="#Effective-Java-Item-17" class="headerlink" title="Effective Java Item 17"></a>Effective Java Item 17</h2><blockquote><p>변경가능성을 최소화하라.</p></blockquote><p><code>Immutable Class</code>는 간단히 변경 불가능한 클래스를 의미한다.<br>Immutable Class의 모든 정보는 객체의 생명 주기 동안 값이 고정되어야 한다. (자바 라이브러리의 <code>String</code>, <code>BigInteger</code>, <code>BigDecimal</code> 등)</p><h3 id="Five-rules-of-immutable-class"><a href="#Five-rules-of-immutable-class" class="headerlink" title="Five rules of immutable class"></a>Five rules of immutable class</h3><ol><li>Don’t provide method that modify the object’s state (known as mutators).<blockquote><p>객체의 상체를 변경시키는 메소드(변경자)를 제공하지 않는다. </p></blockquote></li><li>Ensure that the class can’t be extended.<blockquote><p>클래스를 확장할 수 없게 한다. </p></blockquote></li><li>Make all fields final. <blockquote><p>모든 필드를 final로 한다. </p></blockquote></li><li>Make all fields private.<blockquote><p>모든 필드를 private로 한다.</p></blockquote></li><li>Ensure exclusive access to any mutable components.<blockquote><p>변경 가능한 모든 컴포넌트에 독점적으로 access하게 한다.<br>즉, Immutable Class 자신만 접근 가능하도로 해야한다. </p></blockquote></li></ol><ul><li>mutable object가 있다면 클라이언트에서 참조할 수 없도록 해야한다. </li><li>접근자가 그 필드를 반환해서도 안된다. </li><li>기존에 객체 참조를 넘기던 생성자, 접근자, <code>readObject</code>에서는 방어적 복사를 사용해야한다. </li></ul><h3 id="함수형-프로그래밍"><a href="#함수형-프로그래밍" class="headerlink" title="함수형 프로그래밍"></a>함수형 프로그래밍</h3><ul><li>피연산자에 함수를 적용해 결과를 반환하지만, 피연산자 자체를 변경되지 않는 패턴</li><li>해당 메소드가 상태를 변경시키지 않는점을 강조하기 위해 이름을 동사(add) 대신 전치사(plus)를 사용해야한다. </li></ul><h3 id="불변-객체의-장점"><a href="#불변-객체의-장점" class="headerlink" title="불변 객체의 장점"></a>불변 객체의 장점</h3><ul><li>함수형 프로그래밍을 하면 코드 내 불변 비율이 높아진다.</li><li>불변 객체가 더 단순하고 오류가 적고, 상태가 일정하다. </li><li>불변 객체는 기본적으로 <code>thread-safe</code> 하고 따로 동기화하지 않아도 된다. </li><li>따라서 안심하고 공유할 수 있다. </li></ul><h3 id="불변-객체의-단점"><a href="#불변-객체의-단점" class="headerlink" title="불변 객체의 단점"></a>불변 객체의 단점</h3><ul><li>값이 다르면 항상 새로운 객체로 만들어야 한다. </li></ul><h3 id="불변-객체의-성능-문제"><a href="#불변-객체의-성능-문제" class="headerlink" title="불변 객체의 성능 문제"></a>불변 객체의 성능 문제</h3><ul><li>원하는 객체가 완성하기까지 단계가 많고, 중간 단계가 버려진다면 <code>성능 문제</code>가 생길 수 있다. 이에 대처하기 위해서는</li></ul><ol><li>불변 클래스에서 다단계 연산(<code>multistep operation</code>)을 예측해 기본 기능으로 제공하거나</li><li>가변 동반 클래스(<code>companion class</code>)를 <code>package-private</code> or <code>public</code>으로 제공한다.</li></ol><ul><li>2에 해당하는 것은 <code>String</code>과 <code>StringBuilder</code>가 있다. </li></ul><h3 id="더-유연한-방식의-불변-클래스"><a href="#더-유연한-방식의-불변-클래스" class="headerlink" title="더 유연한 방식의 불변 클래스"></a>더 유연한 방식의 불변 클래스</h3><ul><li>가장 쉬운 방법은 <code>클래스</code>에 <code>final</code> 선언 </li><li>다른 방법으로는 모든 <code>생성자</code>를 <code>private</code> or <code>package-private</code> 하고 <code>public 정적 팩토리 메소드</code>를 제공하는 방법. </li></ul><h3 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h3><ol><li>클래스는 꼭 필요한 경우가 아니면 <code>불변</code>이어야 한다. </li><li>불변으로 만들 수 없는 클래스라도 <code>변경할 수 있는 부분은 최소화</code>하는 것이 좋다. </li><li>다른 이유가 있지 않다면 모든 필드는 <code>private final</code>이어야 한다. </li><li>생성자는 불변식 설정이 모두 완료된, <code>초기화가 완전히 끝난 상태</code>의 객체를 생성해야 한다. <ul><li>생성자와 정적 팩토리 메소드 외에 초기화 메소드를 public으로 제공하면 안됨.</li><li>객체를 재활용할 목적의 메소드도 안됨.(setter 등)</li></ul></li></ol><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Effective-Java-Item-17&quot;&gt;&lt;a href=&quot;#Effective-Java-Item-17&quot; class=&quot;headerlink&quot; title=&quot;Effective Java Item 17&quot;&gt;&lt;/a&gt;Effective Java Item 
      
    
    </summary>
    
      <category term="Programming" scheme="https://kodakyung.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/categories/Programming/Java/"/>
    
    
      <category term="Effective Java" scheme="https://kodakyung.github.io/tags/Effective-Java/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java - Use interfaces only to define types</title>
    <link href="https://kodakyung.github.io/2019/01/18/old-post-EffectiveJava-2019-01-18-Java-Use-interfaces-only-to-define-types/"/>
    <id>https://kodakyung.github.io/2019/01/18/old-post-EffectiveJava-2019-01-18-Java-Use-interfaces-only-to-define-types/</id>
    <published>2019-01-17T15:00:00.000Z</published>
    <updated>2019-07-14T14:37:01.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Effective-Java-Item-22"><a href="#Effective-Java-Item-22" class="headerlink" title="Effective Java Item 22"></a>Effective Java Item 22</h2><blockquote><p>인터페이스는 타입을 정의하는 용도로만 사용하라</p></blockquote><br><ul><li>인터페이스를 <code>implements</code> 한다는 것은 해당 인터페이스의 기능을, 상속 받은 클래스에서 구현해 제공한다는 의미이다.</li><li>인터페이스는 (<code>default method</code>를 제외하고) 구체적인 로직이 없다.</li><li>따라서 <strong>인터페이스의 사용은 인터페이스에서 제공하는 기능을 사용할 수 있는 특정 타입을 지정하는 것과 같다.</strong></li><li>인터페이스의 잘못된 사용은 <code>상수 인터페이스</code>를 사용하는 것이다.</li></ul><br><h3 id="상수-인터페이스"><a href="#상수-인터페이스" class="headerlink" title="상수 인터페이스"></a>상수 인터페이스</h3><ul><li>상수 인터페이스란 <code>static final field</code>만 있는 상수의 용도로 사용하는 인터페이스이다.</li><li>상수 인터페이스를 사용해 클래스의 상수를 대체한다면, 해당 인터페이스에 종속되는 결과를 낳는다. </li><li>또한 어떤 상수가 이 클래스에 사용하는지 불필요한 정보를 제공해 캡슐화를 해친다. </li><li>따라서 해당 클래스에서 필요한 상수라면 상수 인터페이스 구조보다는 클래스 내부 구현을 하는 것이 옳다.</li><li>그외에는 상수 인터페이스를 대체해 <code>열거(enum)타입</code>에 적합하다면 열거 타입을, 아니면 인스턴스화 할 수 없는 <code>유틸리티 클래스</code>로 구현하는 것이 좋다. </li></ul><br><h3 id="정적-임포트-static-import"><a href="#정적-임포트-static-import" class="headerlink" title="정적 임포트(static import)"></a>정적 임포트(static import)</h3><ul><li>유틸리티 클래스에 정의된 상수를 사용하려면 항상 클래스 이름까지 명시해야한다.</li><li>정적 임포트를 하면 클래스 이름을 생략할 수 있다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> className;</span><br></pre></td></tr></table></figure><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Effective-Java-Item-22&quot;&gt;&lt;a href=&quot;#Effective-Java-Item-22&quot; class=&quot;headerlink&quot; title=&quot;Effective Java Item 22&quot;&gt;&lt;/a&gt;Effective Java Item 
      
    
    </summary>
    
      <category term="Programming" scheme="https://kodakyung.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/categories/Programming/Java/"/>
    
    
      <category term="Effective Java" scheme="https://kodakyung.github.io/tags/Effective-Java/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java - Design interfaces for posterity</title>
    <link href="https://kodakyung.github.io/2019/01/17/old-post-EffectiveJava-2019-01-17-Java-Design-interfaces-for-posterity/"/>
    <id>https://kodakyung.github.io/2019/01/17/old-post-EffectiveJava-2019-01-17-Java-Design-interfaces-for-posterity/</id>
    <published>2019-01-16T15:00:00.000Z</published>
    <updated>2019-07-14T14:36:38.147Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Effective-Java-Item-21"><a href="#Effective-Java-Item-21" class="headerlink" title="Effective Java Item 21"></a>Effective Java Item 21</h2><blockquote><p>인터페이스는 구현하는 쪽을 생각해 설계하라. </p></blockquote><br><ul><li>자바 8부터 <code>default method</code>가 추가되면서 <code>기존 인터페이스</code>에 <code>기능을 추가</code>하는 일이 가능해졌다.</li></ul><br><ul><li>하지만 디폴트 메소드를 추가하는 경우 <code>기존 인터페이스 구현체</code>와 <code>오류 없이 연동</code>되는 것을 기대하기 어렵다. </li><li>만약, 어쩔 수 없이 추가해야한다면 가능한 모든 상황에서 <code>불변식</code>을 해치지 않는 디폴트 메소드를 작성해야한다. </li></ul><br><ul><li><code>자바 플랫폼 라이브러리</code>에서는 이런 문제를 예방하기 위한 조치들이 적용되었다.</li><li>예를 들면 구현한 인터페이스의 디폴트 메소드를 재정의하고, 다른 메소드에서는 디폴트 메소드를 호출하기 전에 필요한 수업을 수행하도록 하는 것이다. </li><li>자바 플랫폼에 속하지 않는 기존 컬렉션 구현체들은 위와 같이 언어 차원의 인터페이스 변화에 맞게 수정될 기회가 없었고 실제로 수정되지 않는 것도 있다.</li></ul><br><ul><li><strong>따라서 디폴트 메소드는 컴파일에 성공하더라도 기존 구현체에 런타임 오류를 일으킬 수 있다.</strong></li><li>문제는 여러가지로 발생할 수 있다. 구현된 디폴트 메소드가 불변식을 해치는 경우, 다른 하위 구현체와 연동되지 않는 경우(synchoronize를 고려하지 않았다던지), 이름이 겹치는 경우 등</li></ul><br><ul><li>기존 인터페이스에 디폴트 메소드로 새 메소드를 추가하는 일은 가급적 피해야한다.</li><li>인터페이스를 릴리즈한 후에 인터페이스를 수정하는 것이 위험하기 때문에 <code>꼭 릴리즈 전에 테스트</code>해야한다. </li><li>하지만 새로운 인터페이스를 만든다면 디폴트 메소드는 표준적인 메소드 구현을 제공하는 좋은 도구가 된다.(아이템 20 참고)</li></ul><br><ul><li><strong>즉, 디폴트 메소드(default method)는 기존 인터페이스에 새로운 메소드를 추가하기 위한 기능이 아니라고 생각하는 것이 좋다.</strong></li></ul><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Effective-Java-Item-21&quot;&gt;&lt;a href=&quot;#Effective-Java-Item-21&quot; class=&quot;headerlink&quot; title=&quot;Effective Java Item 21&quot;&gt;&lt;/a&gt;Effective Java Item 
      
    
    </summary>
    
      <category term="Programming" scheme="https://kodakyung.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/categories/Programming/Java/"/>
    
    
      <category term="Effective Java" scheme="https://kodakyung.github.io/tags/Effective-Java/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java - Favor composition over inheritance</title>
    <link href="https://kodakyung.github.io/2019/01/13/old-post-EffectiveJava-2019-01-13-Java-Favor-composition-over-inheritance/"/>
    <id>https://kodakyung.github.io/2019/01/13/old-post-EffectiveJava-2019-01-13-Java-Favor-composition-over-inheritance/</id>
    <published>2019-01-12T15:00:00.000Z</published>
    <updated>2019-07-14T14:36:09.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Effective-Java-Item-18"><a href="#Effective-Java-Item-18" class="headerlink" title="Effective Java Item 18"></a>Effective Java Item 18</h2><blockquote><p>상속보다는 컴포지션을 사용하라 </p></blockquote><ul><li><code>상속(extends)</code>을 목적으로 설계되고, 문서화가 잘 된 클래스가 아니라면 상속하지 않는 것이 좋다. </li><li>특히 다른 패키지의 <code>구체 클래스를 상속</code>하는 것은 위험하다.</li></ul><br><h3 id="상속의-문제점"><a href="#상속의-문제점" class="headerlink" title="상속의 문제점"></a>상속의 문제점</h3><ul><li>상속은 상위 클래스의 구현에 따라 하위 클래스의 동작이 결정되기 때문에 캡슐화를 깨뜨린다.</li><li>위의 이유로 상위 클래스만 수정한 경우에 수정하지 않은 다른 클래스들의 오동작 할 수 있다. </li><li><strong>따라서 상속을 고려한 설계와 문서화가 필요하다(아이템 19)</strong></li></ul><br><ul><li>클래스 내에서 자신의 다른 부분을 사용하는 <code>자기사용(self-use)</code>은 클래스의 내부 구현 방식이다.</li><li>이런 방식은 다음에 코드가 그대로 유지될 지 알 수 없다.</li><li>따라서 이 방식에 의존한 상속은 위험하다. </li></ul><br><ul><li>구현하지 않고 상속 후 새 메소드만 추가하더라도 추후에 상위 클래스에 추가된 메소드와 겹치는 경우 문제가 발생할 수 있다. </li></ul><br><h3 id="상속-문제를-해결하기-위한-컴포지션-Composition"><a href="#상속-문제를-해결하기-위한-컴포지션-Composition" class="headerlink" title="상속 문제를 해결하기 위한 컴포지션(Composition)"></a>상속 문제를 해결하기 위한 컴포지션(Composition)</h3><ul><li><code>컴포지션(Composition)</code>은 기존 클래스를 extends 하는 대신 새로운 클래스를 만들고 <code>새 클래스의 private 필드</code>로 기존 클래스의 인스턴스를 참조하게 하는 <code>구조</code>이다.</li><li>즉 새로운 클래스가 기존 클래스의 구성요소로 쓰인다.</li></ul><h3 id="전달-Forwarding-클래스-메소드"><a href="#전달-Forwarding-클래스-메소드" class="headerlink" title="전달(Forwarding) 클래스/메소드"></a>전달(Forwarding) 클래스/메소드</h3><ul><li>새 클래스에서 기존 클래스에 해당하는 메소드를 호출해 결과를 반환한다.</li><li>위의 방식은 해당 클래스의 내부 구현 방식의 영향에서 벗어날 수 있다.</li><li>이런 <code>방식</code>을 <code>전달(forwarding)</code>이라 하며 이런 메소드들을 <code>전달 메소드(forwarding method)</code>라 한다. </li></ul><h3 id="래퍼-클래스-Wrapper-Class"><a href="#래퍼-클래스-Wrapper-Class" class="headerlink" title="래퍼 클래스(Wrapper Class)"></a>래퍼 클래스(Wrapper Class)</h3><ul><li>구현하려하는 클래스의 전달 클래스를 작성한 뒤 <code>extends</code>해서 새로운 기능을 덧씌울 수 있다.</li><li>이때 이런 클래스를 다른 인스턴스를 감싸고 있다는 의미에서 래퍼 클래스라고 한다.</li><li>또한 새로운 기능을 덧씌우기 때문에 <code>데코레이터 패턴(Decorator pattern)</code>이라고도 한다.</li><li>컴포지션과 전달을 함께 쓰고, 래퍼 객체가 내부 객체에 자신의 참조를 넘기는 경우를 <code>위임(delegation)</code>이라고도 한다.</li><li>래퍼 클래스는 콜백 프레임워크에서 주의해야한다. </li></ul><br><ul><li>A 클래스를 B 클래스가 상속하기 전에, B가 정말 A가 아니라면(is-a) 상속하면 안된다.</li><li>즉 A 클래스는 B의 구성요소가 아니라 구현 방법 중 하나 인 것.</li></ul><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Effective-Java-Item-18&quot;&gt;&lt;a href=&quot;#Effective-Java-Item-18&quot; class=&quot;headerlink&quot; title=&quot;Effective Java Item 18&quot;&gt;&lt;/a&gt;Effective Java Item 
      
    
    </summary>
    
      <category term="Programming" scheme="https://kodakyung.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/categories/Programming/Java/"/>
    
    
      <category term="Effective Java" scheme="https://kodakyung.github.io/tags/Effective-Java/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java - Prefer interfaces to abstract classes</title>
    <link href="https://kodakyung.github.io/2019/01/12/old-post-EffectiveJava-2019-01-12-Java-Prefer-interfaces-to-abstract-classes/"/>
    <id>https://kodakyung.github.io/2019/01/12/old-post-EffectiveJava-2019-01-12-Java-Prefer-interfaces-to-abstract-classes/</id>
    <published>2019-01-11T15:00:00.000Z</published>
    <updated>2019-07-20T14:25:22.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Effective-Java-Item-20"><a href="#Effective-Java-Item-20" class="headerlink" title="Effective Java Item 20"></a>Effective Java Item 20</h2><blockquote><p>추상 클래스보다는 인터페이스를 우선하라</p></blockquote><br><h3 id="추상-클래스-vs-인터페이스"><a href="#추상-클래스-vs-인터페이스" class="headerlink" title="추상 클래스 vs 인터페이스"></a>추상 클래스 vs 인터페이스</h3><ul><li>추상 클래스의 경우 추상 클래스가 정의한 타입을 구현하기 위해 해당 클래스의 하위 클래스가 되어야한다.</li><li>자바는 단일 상속만 제공하기 때문에 추상 클래스는 제약이 있다.</li><li>인터페이스를 사용하는 경우 기존 클래스에도 손쉽게 새로운 인터페이스를 추가할 수 있다.</li><li>계층 구조가 없는 타입 프레임워크를 만들 수 있다. </li><li>개념을 계층적으로 표현하기 어려운 경우 적합하다. </li><li>Java 8부터 <code>default method</code>가 추가되어서 구현 방법이 명백한 경우 그것을 디폴트 메소드로 제공하는 것이 좋다. </li><li>디폴트 메소드 제공시 <code>@implSpec</code> JavaDoc 태그를 붙여 문서화해주는 것이 좋다. </li><li>디폴트 메소드는 Object 메소드를 제공해서는 안된다. (equals, hashcode 등)</li></ul><br><h3 id="추상-골격-구현-클래스"><a href="#추상-골격-구현-클래스" class="headerlink" title="추상 골격 구현 클래스"></a>추상 골격 구현 클래스</h3><ul><li>템플릿 메서드 패턴으로 인터페이스와 추상 클래스의 장점을 함께 사용하기도 한다.</li><li>이때 추상 클래스를 추상 골격 구현(skeletal implementation)이라 한다.</li><li>인터페이스의 이름 앞에 <code>Abstract</code>를 붙인다. (관례)</li><li>인터페이스는 타입과 디폴트 메소드를 정의하고 추상 골격 구현 클래스가 구체적인 나머지 메소드를 구현한다.</li><li>따라서 추상 골격 클래스를 <code>extends</code> 하는 것만으로 인터페이스를 구현하는 대다수의 일이 완료된다. </li></ul><br><ul><li>인터페이스 / 추상 골격 구현 클래스를 분리하는 구조는 <code>상황에 따라 선택</code>할 수 있어서 좋은 구조이다.</li><li>기본적으로 추상 클래스를 extends 하는 것만으로 인터페이스에 대한 구현이 끝나지만 클래스를 상속받을 수 없는 경우라도 인터페이스를 직접 구현할 수 있고 디폴트 메소드는 그대로 implements 할 수 있다.</li><li>또는 우회해서 인터페이스를 implements 한 클래스에서 골격 추상 클래스를 <code>private 내부 클래스</code>로 정의해 사용하는 방법이 있다. </li></ul><br><h3 id="골격-구현-클래스-작성-순서"><a href="#골격-구현-클래스-작성-순서" class="headerlink" title="골격 구현 클래스 작성 순서"></a>골격 구현 클래스 작성 순서</h3><ol><li>인터페이스에서 다른 메소드 들의 구현에 사용되는 기반 메소드 선정 </li><li>1의 기반 메소드를 사용해 직접 구현할 수 있는 경우 인터페이스 디폴트 메소드로 제공<br>: Object 메소드는 제공해선 안된다.</li><li>기반 or 디폴트 메소드 외에 메소드로 만들 메소드가 있다면 골격 구현 클래스에 남은 메소드를 작성한다.<br>: 모두 기반 or 디폴트 메소드라면 골격 구현 클래스를 만들 필요가 없다. </li></ol><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Effective-Java-Item-20&quot;&gt;&lt;a href=&quot;#Effective-Java-Item-20&quot; class=&quot;headerlink&quot; title=&quot;Effective Java Item 20&quot;&gt;&lt;/a&gt;Effective Java Item 
      
    
    </summary>
    
      <category term="Programming" scheme="https://kodakyung.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/categories/Programming/Java/"/>
    
    
      <category term="Effective Java" scheme="https://kodakyung.github.io/tags/Effective-Java/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java - Design and document for inheritance or else prohibit it</title>
    <link href="https://kodakyung.github.io/2019/01/11/old-post-EffectiveJava-2019-01-11-Java-Design-and-document-for-inheritance/"/>
    <id>https://kodakyung.github.io/2019/01/11/old-post-EffectiveJava-2019-01-11-Java-Design-and-document-for-inheritance/</id>
    <published>2019-01-10T15:00:00.000Z</published>
    <updated>2019-07-14T14:35:19.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Effective-Java-Item-19"><a href="#Effective-Java-Item-19" class="headerlink" title="Effective Java Item 19"></a>Effective Java Item 19</h2><blockquote><p>상속을 고려해 설계하고 문서화하라. 그러지 않았다면 상속을 금지하라</p></blockquote><br><h3 id="상속용-클래스"><a href="#상속용-클래스" class="headerlink" title="상속용 클래스"></a>상속용 클래스</h3><ul><li>상속용 클래스는 <code>재정의할 수 있는 메소드</code>들을 <code>내부</code>적으로 <code>어떻게 이용</code>하는지 문서로 남겨야한다. </li><li><code>public</code>, <code>protected</code> 메소드 중 <code>final이 아닌 모든 재정의 가능한 메소드</code>는 재정의 가능 여부를 명시해 주어야 한다. </li></ul><br><h3 id="API-문서-명시"><a href="#API-문서-명시" class="headerlink" title="API 문서 명시"></a>API 문서 명시</h3><ul><li>API 문서 설명에 <code>Implementation Requirements</code>로 시작하는 절은 그 메소드의 내부 동작 방식을 설명한다. </li><li>메소드 주석에 <code>@implSpec</code> 태그를 붙이면 JavaDoc이 자동으로 생성해준다. </li><li><code>@implSpec</code> 태그는 커스텀 태그로 이름을 따로 지정할 수 있다. </li></ul><br><h3 id="상속을-고려한-클래스-설계"><a href="#상속을-고려한-클래스-설계" class="headerlink" title="상속을 고려한 클래스 설계"></a>상속을 고려한 클래스 설계</h3><ul><li>클래스 내부 동작 과정 중 끼어들 수 있는 hook 부분을 <code>protected</code> 메소드 형태로 공개하기도 한다. 또는 protected 필드로 공개하기도 한다. </li><li>예를 들면 <code>java.util.AbstractList</code>의 <code>clear</code> 메소드를 고성능으로 만들기 쉽게 하기 위해서 <code>removeRange</code>메소드를 제공해주는 것과 같다. </li><li>protected 메소드의 공개 여부를 결정하는데 가장 좋은 방법은 클래스를 직접 만들고 사용해보는 것이다.</li></ul><br><ul><li><strong>상속용 클래스의 생성자는 재정의 가능한 메소드를 호출하면 안된다.</strong></li><li>상속 받은 하위 클래스에서 재정의 하기 전에 상위 클래스의 생성자가 먼저 실행되기 때문에 의도하지 않은 결과가 발생할 수 있다.  </li></ul><br><ul><li><code>Cloneable</code>, <code>Serializable</code> 인터페이스를 상속한 경우에도 주의해야한다.</li><li><code>clone</code>, <code>readObject</code> 메소드의 경우에도 생성자와 비슷한 동작을 하기 때문에 재정의 가능 메소드를 호출해선 안된다. </li><li>Serializable을 구현한 상속용 클래스가 <code>readResolve</code>나 <code>writeReplace</code> 메소드를 구현한다면 하위 클래스에서 무시되지 않도록 protected로 선언 해야한다. </li></ul><br><h3 id="상속용으로-설계되지-않았다면"><a href="#상속용으로-설계되지-않았다면" class="headerlink" title="상속용으로 설계되지 않았다면.."></a>상속용으로 설계되지 않았다면..</h3><ul><li>상속용으로 설계되지 않은 클래스는 상속을 금하는 것이 좋다. </li><li>(1) 클래스를 <code>final</code>로 선언하거나 (2) 모든 생성자를 <code>private</code>/<code>package-private</code>로 선언하고 <code>public 정적 팩터리</code>를 만드는 두가지 방법이 있다. </li><li>상속을 꼭 허가해야 한다면 재정의 가능 메소드를 클래스 내부에서 사용하지 않게 문서로 남겨두어야 한다.</li></ul><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Effective-Java-Item-19&quot;&gt;&lt;a href=&quot;#Effective-Java-Item-19&quot; class=&quot;headerlink&quot; title=&quot;Effective Java Item 19&quot;&gt;&lt;/a&gt;Effective Java Item 
      
    
    </summary>
    
      <category term="Programming" scheme="https://kodakyung.github.io/categories/Programming/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/categories/Programming/Java/"/>
    
    
      <category term="Effective Java" scheme="https://kodakyung.github.io/tags/Effective-Java/"/>
    
      <category term="Java" scheme="https://kodakyung.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Test - Stub</title>
    <link href="https://kodakyung.github.io/2018/12/05/old-post-Test-2018-12-05-test-stub/"/>
    <id>https://kodakyung.github.io/2018/12/05/old-post-Test-2018-12-05-test-stub/</id>
    <published>2018-12-04T15:00:00.000Z</published>
    <updated>2019-07-15T06:12:54.158Z</updated>
    
    <content type="html"><![CDATA[<h2 id="스텁-Stub-이란"><a href="#스텁-Stub-이란" class="headerlink" title="스텁(Stub)이란?"></a>스텁(Stub)이란?</h2><p>호출자를 실제 구현물로부터 격리시킬 목적으로 런타임에 실제 코드 대신 삽입되는 코드 조각이다. 실제 코드의 일부를 독립적으로 테스트하기 위해 쓰인다.<br>스텁은 로직이 없고 값만을 반환하기 때문에, 테스트 시 무조건 정해진 값을 반환한다고 가정한 경우 사용할 수 있다.<br>행위에 대한 검증은 mock을 이용한다. </p><h3 id="스텁을-사용하는-경우"><a href="#스텁을-사용하는-경우" class="headerlink" title="스텁을 사용하는 경우"></a>스텁을 사용하는 경우</h3><ul><li>시스템이 너무 복잡하고 깨지기 쉬워 수정이 불가한 경우</li><li>하부 시스템 간의 통합 테스트처럼 포괄적인 테스트를 수행하는 경우</li></ul><blockquote><p>스텁을 이용한 테스트의 신뢰도는 높은 편이다. 왜냐하면 대상 객체를 수정할 필요가 없어 production용 제품과 동일하기 때문이다.</p></blockquote><h3 id="스텁의-단점"><a href="#스텁의-단점" class="headerlink" title="스텁의 단점"></a>스텁의 단점</h3><ul><li>스텁은 대체하려는 코드와 동일한 로직을 갖추어야하므로 검증할 시스템이 복잡할수록 제작하기 어렵다.</li><li>제작이 복잡해 스텁 자체를 디버깅하는 상황도 발생한다.</li><li>복잡성 때문에 유지보수가 어려울 수 있다.</li><li>상세한(fine-grained) 테스트에 적합하지 않다.</li><li>상황에 따라 다른 스텁 정책이 요구된다.</li></ul><blockquote><p>일반적으로 포괄적인 코드 블록을 대체하는 것에 적합하다.<br>파일 시스템, 서버와의 커넥션, 데이터베이스 등 외부 시스템 전체를 대체하는데 주로 사용한다.<br>특정 메소드 하나를 대체하는 경우는 mock 객체로 상세한 테스트를 진행하는 것이 좋다.</p></blockquote><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;스텁-Stub-이란&quot;&gt;&lt;a href=&quot;#스텁-Stub-이란&quot; class=&quot;headerlink&quot; title=&quot;스텁(Stub)이란?&quot;&gt;&lt;/a&gt;스텁(Stub)이란?&lt;/h2&gt;&lt;p&gt;호출자를 실제 구현물로부터 격리시킬 목적으로 런타임에 실제 코드 
      
    
    </summary>
    
      <category term="Server" scheme="https://kodakyung.github.io/categories/Server/"/>
    
      <category term="Test" scheme="https://kodakyung.github.io/categories/Server/Test/"/>
    
    
      <category term="Test" scheme="https://kodakyung.github.io/tags/Test/"/>
    
      <category term="Stub" scheme="https://kodakyung.github.io/tags/Stub/"/>
    
  </entry>
  
</feed>
